
TPN2-CintaTransportadora.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000093e  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000093e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800110  00800110  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001509  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094e  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b5  00000000  00000000  000029b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073a  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000712  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_12>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	9b 01       	movw	r18, r22
  6a:	ad 01       	movw	r20, r26
  6c:	c5 01       	movw	r24, r10
  6e:	da 01       	movw	r26, r20
  70:	ef 01       	movw	r28, r30
  72:	fd 01       	movw	r30, r26
  74:	22 02       	muls	r18, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ee e3       	ldi	r30, 0x3E	; 62
  8a:	f9 e0       	ldi	r31, 0x09	; 9
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 31       	cpi	r26, 0x10	; 16
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	23 e0       	ldi	r18, 0x03	; 3
  9a:	a0 e1       	ldi	r26, 0x10	; 16
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 33       	cpi	r26, 0x3F	; 63
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 4b 04 	call	0x896	; 0x896 <main>
  ac:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <initHcSr04>:
uint8_t CLRFLAGS = 0;

void initHcSr04()
{
	//inicialización de las banderas
	RESETFLAGS = 0;
  b4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <hcFlags>
  b8:	08 95       	ret

000000ba <triggerTask>:
	hcsr04(); //ejecución de la función
}

void triggerTask(uint8_t is100ms)
{
	if(is100ms && ~TRIGGERDONE)//ejecucion cada 100ms y que no haya ocurrido un trigger
  ba:	88 23       	and	r24, r24
  bc:	29 f0       	breq	.+10     	; 0xc8 <triggerTask+0xe>
		NEWMEASURE=1;
  be:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <hcFlags>
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <hcFlags>
  c8:	08 95       	ret

000000ca <hcSr04Task>:
	//inicialización de las banderas
	RESETFLAGS = 0;
}

void hcSr04Task(void (*hcsr04)(), uint8_t *flags) //
{
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	8c 01       	movw	r16, r24
  d4:	eb 01       	movw	r28, r22
	hcFlags.bytes = *flags; //tomamos los valores 
  d6:	88 81       	ld	r24, Y
  d8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <hcFlags>
	//ejecución continua de la función
	
	triggerTask(IS100MS);
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	0e 94 5d 00 	call	0xba	; 0xba <triggerTask>
	
	if(CLRFLAGS)
  e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  e6:	88 23       	and	r24, r24
  e8:	41 f0       	breq	.+16     	; 0xfa <hcSr04Task+0x30>
	{
		OKDISTANCE = 0; //hacemos 0 aca para un control correcto
  ea:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <hcFlags>
		TRIGGERDONE = 0;
  ee:	8f 77       	andi	r24, 0x7F	; 127
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <hcFlags>
		CLRFLAGS = 0;
  f6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	
	//Sistema de control
	if(OKDISTANCE && TRIGGERDONE)
  fa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <hcFlags>
  fe:	80 7c       	andi	r24, 0xC0	; 192
 100:	80 3c       	cpi	r24, 0xC0	; 192
 102:	19 f4       	brne	.+6      	; 0x10a <hcSr04Task+0x40>
	{
		ISDISTANCE=1; 
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ISDISTANCE>
	}	
	
	*flags = hcFlags.bytes;	//guardamos los valores 
 10a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <hcFlags>
 10e:	88 83       	st	Y, r24
	hcsr04(); //ejecución de la función
 110:	f8 01       	movw	r30, r16
 112:	09 95       	icall
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <getDistance>:
	if(is100ms && ~TRIGGERDONE)//ejecucion cada 100ms y que no haya ocurrido un trigger
		NEWMEASURE=1;
}

uint32_t getDistance(uint32_t startTime, uint32_t endTime)
{
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
	uint32_t distance = 0;

	if(ISDISTANCE)
 126:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ISDISTANCE>
 12a:	ee 23       	and	r30, r30
 12c:	91 f0       	breq	.+36     	; 0x152 <getDistance+0x34>
	{
		//Utilizamos estas 2 banderas para poder setear en distintos momentos 
		ISDISTANCE = 0;
 12e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ISDISTANCE>
		CLRFLAGS = 1;
 132:	e1 e0       	ldi	r30, 0x01	; 1
 134:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__data_end>
		distance = (endTime - startTime)/2; //distancia [cm]
 138:	79 01       	movw	r14, r18
 13a:	8a 01       	movw	r16, r20
 13c:	e6 1a       	sub	r14, r22
 13e:	f7 0a       	sbc	r15, r23
 140:	08 0b       	sbc	r16, r24
 142:	19 0b       	sbc	r17, r25
 144:	c8 01       	movw	r24, r16
 146:	b7 01       	movw	r22, r14
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	77 95       	ror	r23
 14e:	67 95       	ror	r22
		return distance;
 150:	03 c0       	rjmp	.+6      	; 0x158 <getDistance+0x3a>
	}
	return 0;	
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	cb 01       	movw	r24, r22
}
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <hcsr04Control>:
	return timeReach;
}

void delayWrite(_delay_t *delay, uint16_t interval){
	delay->interval = interval;
	delay->isRunnig = 0;
 162:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 166:	84 fd       	sbrc	r24, 4
 168:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <hcSr04Modes>
 16c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <hcSr04Modes>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	89 f0       	breq	.+34     	; 0x196 <hcsr04Control+0x34>
 174:	28 f0       	brcs	.+10     	; 0x180 <hcsr04Control+0x1e>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	b9 f0       	breq	.+46     	; 0x1a8 <hcsr04Control+0x46>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	d9 f0       	breq	.+54     	; 0x1b4 <hcsr04Control+0x52>
 17e:	08 95       	ret
 180:	85 b1       	in	r24, 0x05	; 5
 182:	82 60       	ori	r24, 0x02	; 2
 184:	85 b9       	out	0x05, r24	; 5
 186:	ea e8       	ldi	r30, 0x8A	; 138
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	91 81       	ldd	r25, Z+1	; 0x01
 18e:	44 96       	adiw	r24, 0x14	; 20
 190:	91 83       	std	Z+1, r25	; 0x01
 192:	80 83       	st	Z, r24
 194:	1c c0       	rjmp	.+56     	; 0x1ce <hcsr04Control+0x6c>
 196:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <flags>
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	8d 7f       	andi	r24, 0xFD	; 253
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	13 c0       	rjmp	.+38     	; 0x1ce <hcsr04Control+0x6c>
 1a8:	e1 e8       	ldi	r30, 0x81	; 129
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	8f 7b       	andi	r24, 0xBF	; 191
 1b0:	80 83       	st	Z, r24
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <hcsr04Control+0x6c>
 1b4:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <flags>
 1be:	e1 e8       	ldi	r30, 0x81	; 129
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	80 83       	st	Z, r24
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <hcSr04Modes>
 1d4:	08 95       	ret

000001d6 <putHeaderOnTx>:
 1d6:	fc 01       	movw	r30, r24
 1d8:	15 82       	std	Z+5, r1	; 0x05
 1da:	a0 81       	ld	r26, Z
 1dc:	b1 81       	ldd	r27, Z+1	; 0x01
 1de:	83 81       	ldd	r24, Z+3	; 0x03
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	98 0f       	add	r25, r24
 1e4:	93 83       	std	Z+3, r25	; 0x03
 1e6:	a8 0f       	add	r26, r24
 1e8:	b1 1d       	adc	r27, r1
 1ea:	85 e5       	ldi	r24, 0x55	; 85
 1ec:	8c 93       	st	X, r24
 1ee:	84 81       	ldd	r24, Z+4	; 0x04
 1f0:	93 81       	ldd	r25, Z+3	; 0x03
 1f2:	98 23       	and	r25, r24
 1f4:	a0 81       	ld	r26, Z
 1f6:	b1 81       	ldd	r27, Z+1	; 0x01
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	89 0f       	add	r24, r25
 1fc:	83 83       	std	Z+3, r24	; 0x03
 1fe:	a9 0f       	add	r26, r25
 200:	b1 1d       	adc	r27, r1
 202:	8e e4       	ldi	r24, 0x4E	; 78
 204:	8c 93       	st	X, r24
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	93 81       	ldd	r25, Z+3	; 0x03
 20a:	98 23       	and	r25, r24
 20c:	a0 81       	ld	r26, Z
 20e:	b1 81       	ldd	r27, Z+1	; 0x01
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	89 0f       	add	r24, r25
 214:	83 83       	std	Z+3, r24	; 0x03
 216:	a9 0f       	add	r26, r25
 218:	b1 1d       	adc	r27, r1
 21a:	85 e4       	ldi	r24, 0x45	; 69
 21c:	8c 93       	st	X, r24
 21e:	84 81       	ldd	r24, Z+4	; 0x04
 220:	93 81       	ldd	r25, Z+3	; 0x03
 222:	98 23       	and	r25, r24
 224:	a0 81       	ld	r26, Z
 226:	b1 81       	ldd	r27, Z+1	; 0x01
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	89 0f       	add	r24, r25
 22c:	83 83       	std	Z+3, r24	; 0x03
 22e:	a9 0f       	add	r26, r25
 230:	b1 1d       	adc	r27, r1
 232:	82 e5       	ldi	r24, 0x52	; 82
 234:	8c 93       	st	X, r24
 236:	84 81       	ldd	r24, Z+4	; 0x04
 238:	93 81       	ldd	r25, Z+3	; 0x03
 23a:	98 23       	and	r25, r24
 23c:	a0 81       	ld	r26, Z
 23e:	b1 81       	ldd	r27, Z+1	; 0x01
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	89 0f       	add	r24, r25
 244:	83 83       	std	Z+3, r24	; 0x03
 246:	a9 0f       	add	r26, r25
 248:	b1 1d       	adc	r27, r1
 24a:	4f 5f       	subi	r20, 0xFF	; 255
 24c:	4c 93       	st	X, r20
 24e:	84 81       	ldd	r24, Z+4	; 0x04
 250:	93 81       	ldd	r25, Z+3	; 0x03
 252:	98 23       	and	r25, r24
 254:	a0 81       	ld	r26, Z
 256:	b1 81       	ldd	r27, Z+1	; 0x01
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	89 0f       	add	r24, r25
 25c:	83 83       	std	Z+3, r24	; 0x03
 25e:	a9 0f       	add	r26, r25
 260:	b1 1d       	adc	r27, r1
 262:	8a e3       	ldi	r24, 0x3A	; 58
 264:	8c 93       	st	X, r24
 266:	84 81       	ldd	r24, Z+4	; 0x04
 268:	93 81       	ldd	r25, Z+3	; 0x03
 26a:	98 23       	and	r25, r24
 26c:	a0 81       	ld	r26, Z
 26e:	b1 81       	ldd	r27, Z+1	; 0x01
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	89 0f       	add	r24, r25
 274:	83 83       	std	Z+3, r24	; 0x03
 276:	a9 0f       	add	r26, r25
 278:	b1 1d       	adc	r27, r1
 27a:	6c 93       	st	X, r22
 27c:	94 81       	ldd	r25, Z+4	; 0x04
 27e:	83 81       	ldd	r24, Z+3	; 0x03
 280:	98 23       	and	r25, r24
 282:	93 83       	std	Z+3, r25	; 0x03
 284:	95 81       	ldd	r25, Z+5	; 0x05
 286:	49 27       	eor	r20, r25
 288:	64 27       	eor	r22, r20
 28a:	86 e3       	ldi	r24, 0x36	; 54
 28c:	86 27       	eor	r24, r22
 28e:	85 83       	std	Z+5, r24	; 0x05
 290:	08 95       	ret

00000292 <putByteOnTx>:
 292:	fc 01       	movw	r30, r24
 294:	a0 81       	ld	r26, Z
 296:	b1 81       	ldd	r27, Z+1	; 0x01
 298:	83 81       	ldd	r24, Z+3	; 0x03
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	98 0f       	add	r25, r24
 29e:	93 83       	std	Z+3, r25	; 0x03
 2a0:	a8 0f       	add	r26, r24
 2a2:	b1 1d       	adc	r27, r1
 2a4:	6c 93       	st	X, r22
 2a6:	94 81       	ldd	r25, Z+4	; 0x04
 2a8:	83 81       	ldd	r24, Z+3	; 0x03
 2aa:	98 23       	and	r25, r24
 2ac:	93 83       	std	Z+3, r25	; 0x03
 2ae:	85 81       	ldd	r24, Z+5	; 0x05
 2b0:	86 27       	eor	r24, r22
 2b2:	85 83       	std	Z+5, r24	; 0x05
 2b4:	08 95       	ret

000002b6 <putStrOntx>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	fc 01       	movw	r30, r24
 2bc:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <globalIndex>
 2c0:	1b c0       	rjmp	.+54     	; 0x2f8 <putStrOntx+0x42>
 2c2:	a0 81       	ld	r26, Z
 2c4:	b1 81       	ldd	r27, Z+1	; 0x01
 2c6:	83 81       	ldd	r24, Z+3	; 0x03
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	98 0f       	add	r25, r24
 2cc:	93 83       	std	Z+3, r25	; 0x03
 2ce:	a8 0f       	add	r26, r24
 2d0:	b1 1d       	adc	r27, r1
 2d2:	88 81       	ld	r24, Y
 2d4:	8c 93       	st	X, r24
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	93 81       	ldd	r25, Z+3	; 0x03
 2da:	89 23       	and	r24, r25
 2dc:	83 83       	std	Z+3, r24	; 0x03
 2de:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <globalIndex>
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	98 0f       	add	r25, r24
 2e6:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <globalIndex>
 2ea:	db 01       	movw	r26, r22
 2ec:	a8 0f       	add	r26, r24
 2ee:	b1 1d       	adc	r27, r1
 2f0:	8c 91       	ld	r24, X
 2f2:	95 81       	ldd	r25, Z+5	; 0x05
 2f4:	89 27       	eor	r24, r25
 2f6:	85 83       	std	Z+5, r24	; 0x05
 2f8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <globalIndex>
 2fc:	eb 01       	movw	r28, r22
 2fe:	c8 0f       	add	r28, r24
 300:	d1 1d       	adc	r29, r1
 302:	88 81       	ld	r24, Y
 304:	81 11       	cpse	r24, r1
 306:	dd cf       	rjmp	.-70     	; 0x2c2 <putStrOntx+0xc>
 308:	85 81       	ldd	r24, Z+5	; 0x05
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <decodeHeader>:
 310:	dc 01       	movw	r26, r24
 312:	13 96       	adiw	r26, 0x03	; 3
 314:	2c 91       	ld	r18, X
 316:	13 97       	sbiw	r26, 0x03	; 3
 318:	cd c0       	rjmp	.+410    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 31a:	18 96       	adiw	r26, 0x08	; 8
 31c:	ec 91       	ld	r30, X
 31e:	18 97       	sbiw	r26, 0x08	; 8
 320:	4e 2f       	mov	r20, r30
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	47 30       	cpi	r20, 0x07	; 7
 326:	51 05       	cpc	r21, r1
 328:	08 f0       	brcs	.+2      	; 0x32c <decodeHeader+0x1c>
 32a:	b6 c0       	rjmp	.+364    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 32c:	fa 01       	movw	r30, r20
 32e:	ec 5c       	subi	r30, 0xCC	; 204
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	0c 94 97 04 	jmp	0x92e	; 0x92e <__tablejump2__>
 336:	ed 91       	ld	r30, X+
 338:	fc 91       	ld	r31, X
 33a:	11 97       	sbiw	r26, 0x01	; 1
 33c:	e8 0f       	add	r30, r24
 33e:	f1 1d       	adc	r31, r1
 340:	80 81       	ld	r24, Z
 342:	85 35       	cpi	r24, 0x55	; 85
 344:	09 f0       	breq	.+2      	; 0x348 <decodeHeader+0x38>
 346:	ab c0       	rjmp	.+342    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	18 96       	adiw	r26, 0x08	; 8
 34c:	8c 93       	st	X, r24
 34e:	18 97       	sbiw	r26, 0x08	; 8
 350:	85 e0       	ldi	r24, 0x05	; 5
 352:	19 96       	adiw	r26, 0x09	; 9
 354:	8c 93       	st	X, r24
 356:	19 97       	sbiw	r26, 0x09	; 9
 358:	a2 c0       	rjmp	.+324    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 35a:	ed 91       	ld	r30, X+
 35c:	fc 91       	ld	r31, X
 35e:	11 97       	sbiw	r26, 0x01	; 1
 360:	e8 0f       	add	r30, r24
 362:	f1 1d       	adc	r31, r1
 364:	90 81       	ld	r25, Z
 366:	9e 34       	cpi	r25, 0x4E	; 78
 368:	29 f4       	brne	.+10     	; 0x374 <decodeHeader+0x64>
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	18 96       	adiw	r26, 0x08	; 8
 36e:	8c 93       	st	X, r24
 370:	18 97       	sbiw	r26, 0x08	; 8
 372:	95 c0       	rjmp	.+298    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 374:	95 35       	cpi	r25, 0x55	; 85
 376:	09 f4       	brne	.+2      	; 0x37a <decodeHeader+0x6a>
 378:	92 c0       	rjmp	.+292    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 37a:	18 96       	adiw	r26, 0x08	; 8
 37c:	1c 92       	st	X, r1
 37e:	18 97       	sbiw	r26, 0x08	; 8
 380:	81 50       	subi	r24, 0x01	; 1
 382:	12 96       	adiw	r26, 0x02	; 2
 384:	8c 93       	st	X, r24
 386:	12 97       	sbiw	r26, 0x02	; 2
 388:	8a c0       	rjmp	.+276    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 38a:	ed 91       	ld	r30, X+
 38c:	fc 91       	ld	r31, X
 38e:	11 97       	sbiw	r26, 0x01	; 1
 390:	e8 0f       	add	r30, r24
 392:	f1 1d       	adc	r31, r1
 394:	90 81       	ld	r25, Z
 396:	95 34       	cpi	r25, 0x45	; 69
 398:	29 f4       	brne	.+10     	; 0x3a4 <decodeHeader+0x94>
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	18 96       	adiw	r26, 0x08	; 8
 39e:	8c 93       	st	X, r24
 3a0:	18 97       	sbiw	r26, 0x08	; 8
 3a2:	7d c0       	rjmp	.+250    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 3a4:	18 96       	adiw	r26, 0x08	; 8
 3a6:	1c 92       	st	X, r1
 3a8:	18 97       	sbiw	r26, 0x08	; 8
 3aa:	81 50       	subi	r24, 0x01	; 1
 3ac:	12 96       	adiw	r26, 0x02	; 2
 3ae:	8c 93       	st	X, r24
 3b0:	12 97       	sbiw	r26, 0x02	; 2
 3b2:	75 c0       	rjmp	.+234    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 3b4:	ed 91       	ld	r30, X+
 3b6:	fc 91       	ld	r31, X
 3b8:	11 97       	sbiw	r26, 0x01	; 1
 3ba:	e8 0f       	add	r30, r24
 3bc:	f1 1d       	adc	r31, r1
 3be:	90 81       	ld	r25, Z
 3c0:	92 35       	cpi	r25, 0x52	; 82
 3c2:	29 f4       	brne	.+10     	; 0x3ce <decodeHeader+0xbe>
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	18 96       	adiw	r26, 0x08	; 8
 3c8:	8c 93       	st	X, r24
 3ca:	18 97       	sbiw	r26, 0x08	; 8
 3cc:	68 c0       	rjmp	.+208    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 3ce:	18 96       	adiw	r26, 0x08	; 8
 3d0:	1c 92       	st	X, r1
 3d2:	18 97       	sbiw	r26, 0x08	; 8
 3d4:	81 50       	subi	r24, 0x01	; 1
 3d6:	12 96       	adiw	r26, 0x02	; 2
 3d8:	8c 93       	st	X, r24
 3da:	12 97       	sbiw	r26, 0x02	; 2
 3dc:	60 c0       	rjmp	.+192    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 3de:	ed 91       	ld	r30, X+
 3e0:	fc 91       	ld	r31, X
 3e2:	11 97       	sbiw	r26, 0x01	; 1
 3e4:	e8 0f       	add	r30, r24
 3e6:	f1 1d       	adc	r31, r1
 3e8:	80 81       	ld	r24, Z
 3ea:	17 96       	adiw	r26, 0x07	; 7
 3ec:	8c 93       	st	X, r24
 3ee:	17 97       	sbiw	r26, 0x07	; 7
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	18 96       	adiw	r26, 0x08	; 8
 3f4:	8c 93       	st	X, r24
 3f6:	18 97       	sbiw	r26, 0x08	; 8
 3f8:	52 c0       	rjmp	.+164    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 3fa:	ed 91       	ld	r30, X+
 3fc:	fc 91       	ld	r31, X
 3fe:	11 97       	sbiw	r26, 0x01	; 1
 400:	e8 0f       	add	r30, r24
 402:	f1 1d       	adc	r31, r1
 404:	90 81       	ld	r25, Z
 406:	9a 33       	cpi	r25, 0x3A	; 58
 408:	a9 f4       	brne	.+42     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 40a:	96 e0       	ldi	r25, 0x06	; 6
 40c:	18 96       	adiw	r26, 0x08	; 8
 40e:	9c 93       	st	X, r25
 410:	18 97       	sbiw	r26, 0x08	; 8
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	15 96       	adiw	r26, 0x05	; 5
 416:	9c 91       	ld	r25, X
 418:	15 97       	sbiw	r26, 0x05	; 5
 41a:	89 23       	and	r24, r25
 41c:	14 96       	adiw	r26, 0x04	; 4
 41e:	8c 93       	st	X, r24
 420:	14 97       	sbiw	r26, 0x04	; 4
 422:	17 96       	adiw	r26, 0x07	; 7
 424:	9c 91       	ld	r25, X
 426:	17 97       	sbiw	r26, 0x07	; 7
 428:	86 e3       	ldi	r24, 0x36	; 54
 42a:	89 27       	eor	r24, r25
 42c:	16 96       	adiw	r26, 0x06	; 6
 42e:	8c 93       	st	X, r24
 430:	16 97       	sbiw	r26, 0x06	; 6
 432:	35 c0       	rjmp	.+106    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 434:	18 96       	adiw	r26, 0x08	; 8
 436:	1c 92       	st	X, r1
 438:	18 97       	sbiw	r26, 0x08	; 8
 43a:	81 50       	subi	r24, 0x01	; 1
 43c:	12 96       	adiw	r26, 0x02	; 2
 43e:	8c 93       	st	X, r24
 440:	12 97       	sbiw	r26, 0x02	; 2
 442:	2d c0       	rjmp	.+90     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 444:	17 96       	adiw	r26, 0x07	; 7
 446:	9c 91       	ld	r25, X
 448:	17 97       	sbiw	r26, 0x07	; 7
 44a:	91 50       	subi	r25, 0x01	; 1
 44c:	17 96       	adiw	r26, 0x07	; 7
 44e:	9c 93       	st	X, r25
 450:	17 97       	sbiw	r26, 0x07	; 7
 452:	99 23       	and	r25, r25
 454:	71 f0       	breq	.+28     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 456:	ed 91       	ld	r30, X+
 458:	fc 91       	ld	r31, X
 45a:	11 97       	sbiw	r26, 0x01	; 1
 45c:	e8 0f       	add	r30, r24
 45e:	f1 1d       	adc	r31, r1
 460:	80 81       	ld	r24, Z
 462:	16 96       	adiw	r26, 0x06	; 6
 464:	9c 91       	ld	r25, X
 466:	16 97       	sbiw	r26, 0x06	; 6
 468:	89 27       	eor	r24, r25
 46a:	16 96       	adiw	r26, 0x06	; 6
 46c:	8c 93       	st	X, r24
 46e:	16 97       	sbiw	r26, 0x06	; 6
 470:	16 c0       	rjmp	.+44     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 472:	18 96       	adiw	r26, 0x08	; 8
 474:	1c 92       	st	X, r1
 476:	18 97       	sbiw	r26, 0x08	; 8
 478:	ed 91       	ld	r30, X+
 47a:	fc 91       	ld	r31, X
 47c:	11 97       	sbiw	r26, 0x01	; 1
 47e:	e8 0f       	add	r30, r24
 480:	f1 1d       	adc	r31, r1
 482:	90 81       	ld	r25, Z
 484:	16 96       	adiw	r26, 0x06	; 6
 486:	8c 91       	ld	r24, X
 488:	16 97       	sbiw	r26, 0x06	; 6
 48a:	98 13       	cpse	r25, r24
 48c:	08 c0       	rjmp	.+16     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	1a 96       	adiw	r26, 0x0a	; 10
 492:	8c 93       	st	X, r24
 494:	1a 97       	sbiw	r26, 0x0a	; 10
 496:	03 c0       	rjmp	.+6      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 498:	18 96       	adiw	r26, 0x08	; 8
 49a:	1c 92       	st	X, r1
 49c:	18 97       	sbiw	r26, 0x08	; 8
 49e:	12 96       	adiw	r26, 0x02	; 2
 4a0:	8c 91       	ld	r24, X
 4a2:	12 97       	sbiw	r26, 0x02	; 2
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	15 96       	adiw	r26, 0x05	; 5
 4a8:	9c 91       	ld	r25, X
 4aa:	15 97       	sbiw	r26, 0x05	; 5
 4ac:	89 23       	and	r24, r25
 4ae:	12 96       	adiw	r26, 0x02	; 2
 4b0:	8c 93       	st	X, r24
 4b2:	12 97       	sbiw	r26, 0x02	; 2
 4b4:	12 96       	adiw	r26, 0x02	; 2
 4b6:	8c 91       	ld	r24, X
 4b8:	12 97       	sbiw	r26, 0x02	; 2
 4ba:	28 13       	cpse	r18, r24
 4bc:	2e cf       	rjmp	.-420    	; 0x31a <decodeHeader+0xa>
 4be:	08 95       	ret

000004c0 <decodeCommand>:
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	eb 01       	movw	r28, r22
 4ca:	dc 01       	movw	r26, r24
 4cc:	ed 91       	ld	r30, X+
 4ce:	fc 91       	ld	r31, X
 4d0:	11 97       	sbiw	r26, 0x01	; 1
 4d2:	14 96       	adiw	r26, 0x04	; 4
 4d4:	8c 91       	ld	r24, X
 4d6:	e8 0f       	add	r30, r24
 4d8:	f1 1d       	adc	r31, r1
 4da:	60 81       	ld	r22, Z
 4dc:	60 3f       	cpi	r22, 0xF0	; 240
 4de:	31 f0       	breq	.+12     	; 0x4ec <decodeCommand+0x2c>
 4e0:	61 3f       	cpi	r22, 0xF1	; 241
 4e2:	91 f0       	breq	.+36     	; 0x508 <decodeCommand+0x48>
 4e4:	63 3a       	cpi	r22, 0xA3	; 163
 4e6:	09 f0       	breq	.+2      	; 0x4ea <decodeCommand+0x2a>
 4e8:	5a c0       	rjmp	.+180    	; 0x59e <decodeCommand+0xde>
 4ea:	1d c0       	rjmp	.+58     	; 0x526 <decodeCommand+0x66>
 4ec:	42 e0       	ldi	r20, 0x02	; 2
 4ee:	60 ef       	ldi	r22, 0xF0	; 240
 4f0:	ce 01       	movw	r24, r28
 4f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <putHeaderOnTx>
 4f6:	6d e0       	ldi	r22, 0x0D	; 13
 4f8:	ce 01       	movw	r24, r28
 4fa:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 4fe:	6d 81       	ldd	r22, Y+5	; 0x05
 500:	ce 01       	movw	r24, r28
 502:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 506:	57 c0       	rjmp	.+174    	; 0x5b6 <decodeCommand+0xf6>
 508:	4c e0       	ldi	r20, 0x0C	; 12
 50a:	61 ef       	ldi	r22, 0xF1	; 241
 50c:	ce 01       	movw	r24, r28
 50e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <putHeaderOnTx>
 512:	62 e0       	ldi	r22, 0x02	; 2
 514:	71 e0       	ldi	r23, 0x01	; 1
 516:	ce 01       	movw	r24, r28
 518:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <putStrOntx>
 51c:	6d 81       	ldd	r22, Y+5	; 0x05
 51e:	ce 01       	movw	r24, r28
 520:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 524:	48 c0       	rjmp	.+144    	; 0x5b6 <decodeCommand+0xf6>
 526:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <endTime>
 52a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <endTime+0x1>
 52e:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <endTime+0x2>
 532:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <endTime+0x3>
 536:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <startTime>
 53a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <startTime+0x1>
 53e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <startTime+0x2>
 542:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <startTime+0x3>
 546:	0e 94 8f 00 	call	0x11e	; 0x11e <getDistance>
 54a:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <myWord>
 54e:	70 93 3a 02 	sts	0x023A, r23	; 0x80023a <myWord+0x1>
 552:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <myWord+0x2>
 556:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <myWord+0x3>
 55a:	45 e0       	ldi	r20, 0x05	; 5
 55c:	63 ea       	ldi	r22, 0xA3	; 163
 55e:	ce 01       	movw	r24, r28
 560:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <putHeaderOnTx>
 564:	09 e3       	ldi	r16, 0x39	; 57
 566:	12 e0       	ldi	r17, 0x02	; 2
 568:	f8 01       	movw	r30, r16
 56a:	60 81       	ld	r22, Z
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 572:	d8 01       	movw	r26, r16
 574:	11 96       	adiw	r26, 0x01	; 1
 576:	6c 91       	ld	r22, X
 578:	ce 01       	movw	r24, r28
 57a:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 57e:	f8 01       	movw	r30, r16
 580:	62 81       	ldd	r22, Z+2	; 0x02
 582:	ce 01       	movw	r24, r28
 584:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 588:	d8 01       	movw	r26, r16
 58a:	13 96       	adiw	r26, 0x03	; 3
 58c:	6c 91       	ld	r22, X
 58e:	ce 01       	movw	r24, r28
 590:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 594:	6d 81       	ldd	r22, Y+5	; 0x05
 596:	ce 01       	movw	r24, r28
 598:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 59c:	0c c0       	rjmp	.+24     	; 0x5b6 <decodeCommand+0xf6>
 59e:	42 e0       	ldi	r20, 0x02	; 2
 5a0:	ce 01       	movw	r24, r28
 5a2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <putHeaderOnTx>
 5a6:	6f ef       	ldi	r22, 0xFF	; 255
 5a8:	ce 01       	movw	r24, r28
 5aa:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 5ae:	6d 81       	ldd	r22, Y+5	; 0x05
 5b0:	ce 01       	movw	r24, r28
 5b2:	0e 94 49 01 	call	0x292	; 0x292 <putByteOnTx>
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	08 95       	ret

000005c0 <delayConfig>:
 5c0:	fc 01       	movw	r30, r24
 5c2:	75 83       	std	Z+5, r23	; 0x05
 5c4:	64 83       	std	Z+4, r22	; 0x04
 5c6:	16 82       	std	Z+6, r1	; 0x06
 5c8:	08 95       	ret

000005ca <millis>:
}

uint32_t millis()
{
	uint32_t savedMillis;
	sei();
 5ca:	78 94       	sei
		savedMillis = MillisCounter;	
 5cc:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <MillisCounter>
 5d0:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <MillisCounter+0x1>
 5d4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <MillisCounter+0x2>
 5d8:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <MillisCounter+0x3>
	cli();
 5dc:	f8 94       	cli
	return savedMillis;
}
 5de:	08 95       	ret

000005e0 <delayRead>:
void delayConfig(_delay_t *delay, uint16_t  interval){
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	ec 01       	movw	r28, r24
	uint8_t timeReach=0;
	if(!delay->isRunnig){
 5ea:	8e 81       	ldd	r24, Y+6	; 0x06
 5ec:	81 11       	cpse	r24, r1
 5ee:	0a c0       	rjmp	.+20     	; 0x604 <delayRead+0x24>
		delay->isRunnig = 1;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	8e 83       	std	Y+6, r24	; 0x06
		delay->startTime = millis();
 5f4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <millis>
 5f8:	68 83       	st	Y, r22
 5fa:	79 83       	std	Y+1, r23	; 0x01
 5fc:	8a 83       	std	Y+2, r24	; 0x02
 5fe:	9b 83       	std	Y+3, r25	; 0x03
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
	uint8_t timeReach=0;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	19 c0       	rjmp	.+50     	; 0x636 <delayRead+0x56>
	if(!delay->isRunnig){
		delay->isRunnig = 1;
		delay->startTime = millis();
		}else{
		if((millis()-delay->startTime)>=delay->interval){
 604:	0e 94 e5 02 	call	0x5ca	; 0x5ca <millis>
 608:	08 81       	ld	r16, Y
 60a:	19 81       	ldd	r17, Y+1	; 0x01
 60c:	2a 81       	ldd	r18, Y+2	; 0x02
 60e:	3b 81       	ldd	r19, Y+3	; 0x03
 610:	ab 01       	movw	r20, r22
 612:	bc 01       	movw	r22, r24
 614:	40 1b       	sub	r20, r16
 616:	51 0b       	sbc	r21, r17
 618:	62 0b       	sbc	r22, r18
 61a:	73 0b       	sbc	r23, r19
 61c:	8c 81       	ldd	r24, Y+4	; 0x04
 61e:	9d 81       	ldd	r25, Y+5	; 0x05
 620:	a0 e0       	ldi	r26, 0x00	; 0
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	48 17       	cp	r20, r24
 626:	59 07       	cpc	r21, r25
 628:	6a 07       	cpc	r22, r26
 62a:	7b 07       	cpc	r23, r27
 62c:	18 f0       	brcs	.+6      	; 0x634 <delayRead+0x54>
			timeReach = 1;
			delay->isRunnig = 0;
 62e:	1e 82       	std	Y+6, r1	; 0x06
	if(!delay->isRunnig){
		delay->isRunnig = 1;
		delay->startTime = millis();
		}else{
		if((millis()-delay->startTime)>=delay->interval){
			timeReach = 1;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	01 c0       	rjmp	.+2      	; 0x636 <delayRead+0x56>
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
	uint8_t timeReach=0;
 634:	80 e0       	ldi	r24, 0x00	; 0
			timeReach = 1;
			delay->isRunnig = 0;
		}
	}
	return timeReach;
}
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	1f 91       	pop	r17
 63c:	0f 91       	pop	r16
 63e:	08 95       	ret

00000640 <serialTask>:

/* Function prototypes user code ----------------------------------------------*/

//CONEXION SERIAL - WIFI
void serialTask(_sRx *dataRx, _sTx *dataTx)
{
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ec 01       	movw	r28, r24
 64a:	8b 01       	movw	r16, r22
	
    if(dataRx->isComannd){
 64c:	8a 85       	ldd	r24, Y+10	; 0x0a
 64e:	88 23       	and	r24, r24
 650:	21 f0       	breq	.+8      	; 0x65a <serialTask+0x1a>
        dataRx->isComannd=0; //false reemplazado por 0
 652:	1a 86       	std	Y+10, r1	; 0x0a
		
        decodeCommand(dataRx,dataTx);
 654:	ce 01       	movw	r24, r28
 656:	0e 94 60 02 	call	0x4c0	; 0x4c0 <decodeCommand>
    }

	//Revisamos si llego un nuevo dato en el serie
	if(delayRead(&generalTime)){
 65a:	80 e3       	ldi	r24, 0x30	; 48
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <delayRead>
 662:	88 23       	and	r24, r24
 664:	49 f0       	breq	.+18     	; 0x678 <serialTask+0x38>
		if(dataRx->header){
 666:	88 85       	ldd	r24, Y+8	; 0x08
 668:	88 23       	and	r24, r24
 66a:	31 f0       	breq	.+12     	; 0x678 <serialTask+0x38>
			dataRx->timeOut--;
 66c:	89 85       	ldd	r24, Y+9	; 0x09
 66e:	81 50       	subi	r24, 0x01	; 1
 670:	89 87       	std	Y+9, r24	; 0x09
			if(!dataRx->timeOut)
 672:	81 11       	cpse	r24, r1
 674:	01 c0       	rjmp	.+2      	; 0x678 <serialTask+0x38>
			dataRx->header = HEADER_U;
 676:	18 86       	std	Y+8, r1	; 0x08
			//PORTB |= (1<<LEDBUILTIN); //LedOn
		}
	}
	
    if(dataRx->indexR!=dataRx->indexW){
 678:	9a 81       	ldd	r25, Y+2	; 0x02
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	98 17       	cp	r25, r24
 67e:	19 f0       	breq	.+6      	; 0x686 <serialTask+0x46>
		
        decodeHeader(dataRx);
 680:	ce 01       	movw	r24, r28
 682:	0e 94 88 01 	call	0x310	; 0x310 <decodeHeader>
    } 	

    if(dataTx->indexR!=dataTx->indexW)
 686:	d8 01       	movw	r26, r16
 688:	12 96       	adiw	r26, 0x02	; 2
 68a:	8c 91       	ld	r24, X
 68c:	12 97       	sbiw	r26, 0x02	; 2
 68e:	13 96       	adiw	r26, 0x03	; 3
 690:	9c 91       	ld	r25, X
 692:	13 97       	sbiw	r26, 0x03	; 3
 694:	89 17       	cp	r24, r25
 696:	d1 f0       	breq	.+52     	; 0x6cc <serialTask+0x8c>
	{
		if(UCSR0A & (1 << UDRE0))
 698:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 69c:	95 ff       	sbrs	r25, 5
 69e:	16 c0       	rjmp	.+44     	; 0x6cc <serialTask+0x8c>
		{
			UDR0=dataTx->buff[dataTx->indexR++];
 6a0:	ed 91       	ld	r30, X+
 6a2:	fc 91       	ld	r31, X
 6a4:	11 97       	sbiw	r26, 0x01	; 1
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	98 0f       	add	r25, r24
 6aa:	12 96       	adiw	r26, 0x02	; 2
 6ac:	9c 93       	st	X, r25
 6ae:	12 97       	sbiw	r26, 0x02	; 2
 6b0:	e8 0f       	add	r30, r24
 6b2:	f1 1d       	adc	r31, r1
 6b4:	80 81       	ld	r24, Z
 6b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			dataTx->indexR &=dataTx->mask;
 6ba:	14 96       	adiw	r26, 0x04	; 4
 6bc:	8c 91       	ld	r24, X
 6be:	14 97       	sbiw	r26, 0x04	; 4
 6c0:	12 96       	adiw	r26, 0x02	; 2
 6c2:	9c 91       	ld	r25, X
 6c4:	12 97       	sbiw	r26, 0x02	; 2
 6c6:	89 23       	and	r24, r25
 6c8:	12 96       	adiw	r26, 0x02	; 2
 6ca:	8c 93       	st	X, r24
		}
    }

}
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	08 95       	ret

000006d6 <initUSART0>:
}

void initUSART0()//USART -> 115200 bd
{
	
	UCSR0A = 0xFE;
 6d6:	8e ef       	ldi	r24, 0xFE	; 254
 6d8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 6dc:	88 e9       	ldi	r24, 0x98	; 152
 6de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0x06;
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = 16;
 6e8:	80 e1       	ldi	r24, 0x10	; 16
 6ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = 0;
 6ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6f2:	08 95       	ret

000006f4 <initTimer0>:
}

void initTimer0()
{
	//Timer -> modo CTC - fclk/64 - CR0A: 249 -> 1ms
	TCCR0A = 0x02;
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Seteo del prescaler
 6f8:	93 e0       	ldi	r25, 0x03	; 3
 6fa:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 0x00;
 6fc:	16 bc       	out	0x26, r1	; 38
	TIFR0 = 0x07;
 6fe:	97 e0       	ldi	r25, 0x07	; 7
 700:	95 bb       	out	0x15, r25	; 21
	OCR0A = 249; //Comienza en 0 
 702:	99 ef       	ldi	r25, 0xF9	; 249
 704:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;
 706:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 70a:	08 95       	ret

0000070c <initTimer1>:
}

void initTimer1()
{
	//Configuraci?n para funcionamiento normal - fclk/8 -> 2Mhz - 0,5uS
	TCNT1 = 0;
 70c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 710:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0;
 714:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	//TCCR1B = 0xC2; //Timer en 2mHz con preescaler de 8, y tambien se configura para esperar un flanco ascendente en el ICP1
	TCCR1B=(1<<ICNC1) | (1<<ICES1) | (0<<CS12) | (1<<CS11) | (0<<CS10); //Activamos la cancelacion de ruido y el preescaler a 8
 718:	82 ec       	ldi	r24, 0xC2	; 194
 71a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1B) | (1 << ICIE1); //Habilitamos la interrupci?n por captura de entrada ICIE1
 71e:	84 e2       	ldi	r24, 0x24	; 36
 720:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TIFR1 = TIFR1; //Hacemos 0 las banderas
 724:	86 b3       	in	r24, 0x16	; 22
 726:	86 bb       	out	0x16, r24	; 22
 728:	08 95       	ret

0000072a <do10ms>:
	//OCR1B += 20; //Valor inicial ser?a de 10us 
}

void do10ms()
{
	if (time10ms == 0)
 72a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time10ms>
 72e:	81 11       	cpse	r24, r1
 730:	08 c0       	rjmp	.+16     	; 0x742 <do10ms+0x18>
	{
		IS10MS = 1;
 732:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 736:	82 60       	ori	r24, 0x02	; 2
 738:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <flags>
		time10ms = 10;
 73c:	8a e0       	ldi	r24, 0x0A	; 10
 73e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time10ms>
 742:	08 95       	ret

00000744 <do100ms>:
	}
}

void do100ms()
{
	if(time100ms == 0)//reiniciamos el valor
 744:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 748:	81 11       	cpse	r24, r1
 74a:	08 c0       	rjmp	.+16     	; 0x75c <do100ms+0x18>
	{
		IS100MS = 1; //Activamos la bandera del pasode 100ms
 74c:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 750:	81 60       	ori	r24, 0x01	; 1
 752:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <flags>
		time100ms = 10;
 756:	8a e0       	ldi	r24, 0x0A	; 10
 758:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(IS10MS==1)
 75c:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 760:	81 ff       	sbrs	r24, 1
 762:	0f c0       	rjmp	.+30     	; 0x782 <do100ms+0x3e>
	{
		time100ms--;
 764:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 768:	81 50       	subi	r24, 0x01	; 1
 76a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		IS10MS = 0;//limpiamos la bandera de 10ms
 76e:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 772:	8d 7f       	andi	r24, 0xFD	; 253
 774:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <flags>
		IS100MS = 0;//limpiamos la bandera de 100ms
 778:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <flags>
 77c:	8e 7f       	andi	r24, 0xFE	; 254
 77e:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <flags>
 782:	08 95       	ret

00000784 <__vector_18>:


//INTERRUPTS
// Rutina de servicio de interrupci?n (ISR) para recepci?n USART
ISR(USART_RX_vect) // Vector 19 (0x0024)
{	
 784:	1f 92       	push	r1
 786:	0f 92       	push	r0
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	0f 92       	push	r0
 78c:	11 24       	eor	r1, r1
 78e:	8f 93       	push	r24
 790:	9f 93       	push	r25
 792:	af 93       	push	r26
 794:	bf 93       	push	r27
 796:	ef 93       	push	r30
 798:	ff 93       	push	r31
	dataRx.buff[dataRx.indexW++] = UDR0;
 79a:	ef e1       	ldi	r30, 0x1F	; 31
 79c:	f2 e0       	ldi	r31, 0x02	; 2
 79e:	a0 81       	ld	r26, Z
 7a0:	b1 81       	ldd	r27, Z+1	; 0x01
 7a2:	83 81       	ldd	r24, Z+3	; 0x03
 7a4:	91 e0       	ldi	r25, 0x01	; 1
 7a6:	98 0f       	add	r25, r24
 7a8:	93 83       	std	Z+3, r25	; 0x03
 7aa:	a8 0f       	add	r26, r24
 7ac:	b1 1d       	adc	r27, r1
 7ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7b2:	8c 93       	st	X, r24
	dataRx.indexW &= dataRx.mask;
 7b4:	95 81       	ldd	r25, Z+5	; 0x05
 7b6:	83 81       	ldd	r24, Z+3	; 0x03
 7b8:	89 23       	and	r24, r25
 7ba:	83 83       	std	Z+3, r24	; 0x03
}
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <__vector_14>:

// Rutina de servicio de interrupci?n (ISR) para Timer0 Compare Match A
ISR(TIMER0_COMPA_vect) // Vector 15 (0x001C)
{
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	8f 93       	push	r24
 7de:	9f 93       	push	r25
 7e0:	af 93       	push	r26
 7e2:	bf 93       	push	r27
	MillisCounter++;
 7e4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <MillisCounter>
 7e8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <MillisCounter+0x1>
 7ec:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <MillisCounter+0x2>
 7f0:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <MillisCounter+0x3>
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	a1 1d       	adc	r26, r1
 7f8:	b1 1d       	adc	r27, r1
 7fa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <MillisCounter>
 7fe:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <MillisCounter+0x1>
 802:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <MillisCounter+0x2>
 806:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <MillisCounter+0x3>
	time10ms--;
 80a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time10ms>
 80e:	81 50       	subi	r24, 0x01	; 1
 810:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time10ms>
}
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	1f 90       	pop	r1
 824:	18 95       	reti

00000826 <__vector_12>:

//Interrupcion cada 10us
ISR(TIMER1_COMPB_vect)
{		
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	8f 93       	push	r24
	hcSr04Modes=OFFTRIGGER; //Bandera para seguir adelante con la ejecuci?n del codigo
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <hcSr04Modes>
}
 838:	8f 91       	pop	r24
 83a:	0f 90       	pop	r0
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	0f 90       	pop	r0
 840:	1f 90       	pop	r1
 842:	18 95       	reti

00000844 <__vector_10>:
/*
ICES = 0 -> falling (negative) edge 
ICES = 1 -> rising (positive) edge
*/
//Captura del flanco 
ISR(TIMER1_CAPT_vect){
 844:	1f 92       	push	r1
 846:	0f 92       	push	r0
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	0f 92       	push	r0
 84c:	11 24       	eor	r1, r1
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
	if (TCCR1B & (1 << ICES1)) // Pin es 1, flanco ascendente inicio del eco
 856:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 85a:	86 ff       	sbrs	r24, 6
 85c:	11 c0       	rjmp	.+34     	; 0x880 <__vector_10+0x3c>
	{ 
		hcSr04Modes=UPFLANK;
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <hcSr04Modes>
		startTime = ICR1; //guardamos el tiempo en ese instante
 864:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 868:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 86c:	a0 e0       	ldi	r26, 0x00	; 0
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <startTime>
 874:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <startTime+0x1>
 878:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <startTime+0x2>
 87c:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <startTime+0x3>
	}
	if (TCCR1B & (0 << ICES1)) // Flanco descendente (fin del eco)
 880:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	{  
		hcSr04Modes=DOWNFLANK;	
		endTime = ICR1;
	}
}
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

00000896 <main>:

/* END Function prototypes user code ------------------------------------------*/

int main()
{
	cli();
 896:	f8 94       	cli
    //INICIALIZAMOS VARIABLES
    dataRx.buff = (uint8_t *)buffRx;
 898:	ef e1       	ldi	r30, 0x1F	; 31
 89a:	f2 e0       	ldi	r31, 0x02	; 2
 89c:	8f e1       	ldi	r24, 0x1F	; 31
 89e:	91 e0       	ldi	r25, 0x01	; 1
 8a0:	91 83       	std	Z+1, r25	; 0x01
 8a2:	80 83       	st	Z, r24
    dataRx.indexR = 0;
 8a4:	12 82       	std	Z+2, r1	; 0x02
    dataRx.indexW = 0;
 8a6:	13 82       	std	Z+3, r1	; 0x03
    dataRx.header = HEADER_U;
 8a8:	10 86       	std	Z+8, r1	; 0x08
    dataRx.mask = RXBUFSIZE - 1;
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	85 83       	std	Z+5, r24	; 0x05
	dataRx.isComannd = 0;
 8ae:	12 86       	std	Z+10, r1	; 0x0a
	
    dataTx.buff = buffTx;
 8b0:	ea e2       	ldi	r30, 0x2A	; 42
 8b2:	f2 e0       	ldi	r31, 0x02	; 2
 8b4:	2e e3       	ldi	r18, 0x3E	; 62
 8b6:	32 e0       	ldi	r19, 0x02	; 2
 8b8:	31 83       	std	Z+1, r19	; 0x01
 8ba:	20 83       	st	Z, r18
    dataTx.indexR = 0;
 8bc:	12 82       	std	Z+2, r1	; 0x02
    dataTx.indexW = 0;
 8be:	13 82       	std	Z+3, r1	; 0x03
    dataTx.mask = TXBUFSIZE -1;
 8c0:	84 83       	std	Z+4, r24	; 0x04
    RESETFLAGS = 0;
 8c2:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <flags>
	
	MillisCounter = 0;
 8c6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <MillisCounter>
 8ca:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <MillisCounter+0x1>
 8ce:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <MillisCounter+0x2>
 8d2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <MillisCounter+0x3>
	
	//Inicializamos los pines salida/entrada
	DDRB |= (1<<LEDBUILTIN); //Seteo del led como salida	
 8d6:	84 b1       	in	r24, 0x04	; 4
 8d8:	80 62       	ori	r24, 0x20	; 32
 8da:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<TRIG) | (0<<ECHO);//Definimos el trig como salida y el echo como entrada
 8dc:	84 b1       	in	r24, 0x04	; 4
 8de:	82 60       	ori	r24, 0x02	; 2
 8e0:	84 b9       	out	0x04, r24	; 4
	
	//Seteamos el valor del led
	PORTB &= ~(1<<LEDBUILTIN); //ledOff
 8e2:	85 b1       	in	r24, 0x05	; 5
 8e4:	8f 7d       	andi	r24, 0xDF	; 223
 8e6:	85 b9       	out	0x05, r24	; 5
	//PORTB |= (1<<LEDBUILTIN); //ledOn
	PORTB &= ~(1<<TRIG);//Inicializamos con el trigger apagado
 8e8:	85 b1       	in	r24, 0x05	; 5
 8ea:	8d 7f       	andi	r24, 0xFD	; 253
 8ec:	85 b9       	out	0x05, r24	; 5

	//Inicializamos interrupciones
	initTimer0();
 8ee:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <initTimer0>
	initTimer1();
 8f2:	0e 94 86 03 	call	0x70c	; 0x70c <initTimer1>
	initUSART0();
 8f6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <initUSART0>
	
	initHcSr04(); //Inicializamos el sensor
 8fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <initHcSr04>
	
	//Configuracion de temporizadores
	delayConfig(&generalTime,GENERALTIME);
 8fe:	6a e0       	ldi	r22, 0x0A	; 10
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	80 e3       	ldi	r24, 0x30	; 48
 904:	92 e0       	ldi	r25, 0x02	; 2
 906:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <delayConfig>
	
	sei();
 90a:	78 94       	sei
/* END Local variables -------------------------------------------------------*/


/* User code -----------------------------------------------------------------*/	
    while(1){
		do10ms();
 90c:	0e 94 95 03 	call	0x72a	; 0x72a <do10ms>
		do100ms(); //función de librería
 910:	0e 94 a2 03 	call	0x744	; 0x744 <do100ms>
				
		hcSr04Task(hcsr04Control, (uint8_t*)&flags);
 914:	6e e3       	ldi	r22, 0x3E	; 62
 916:	73 e0       	ldi	r23, 0x03	; 3
 918:	81 eb       	ldi	r24, 0xB1	; 177
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 65 00 	call	0xca	; 0xca <hcSr04Task>
		
        //CONEXIONES SERIAL Y WIFI
        serialTask((_sRx *)&dataRx, &dataTx); //serialTask -> conexion serial
 920:	6a e2       	ldi	r22, 0x2A	; 42
 922:	72 e0       	ldi	r23, 0x02	; 2
 924:	8f e1       	ldi	r24, 0x1F	; 31
 926:	92 e0       	ldi	r25, 0x02	; 2
 928:	0e 94 20 03 	call	0x640	; 0x640 <serialTask>
 92c:	ef cf       	rjmp	.-34     	; 0x90c <__stack+0xd>

0000092e <__tablejump2__>:
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	05 90       	lpm	r0, Z+
 934:	f4 91       	lpm	r31, Z
 936:	e0 2d       	mov	r30, r0
 938:	09 94       	ijmp

0000093a <_exit>:
 93a:	f8 94       	cli

0000093c <__stop_program>:
 93c:	ff cf       	rjmp	.-2      	; 0x93c <__stop_program>
