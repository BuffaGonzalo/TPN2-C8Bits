
TPN2-CintaTransportadora.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000008fc  00000990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  00800110  00800110  000009a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d2  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000827  00000000  00000000  00001dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000889  00000000  00000000  000025e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00002e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d3  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cc  00000000  00000000  000037a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_12>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0a 01       	movw	r0, r20
  6a:	1c 01       	movw	r2, r24
  6c:	34 01       	movw	r6, r8
  6e:	49 01       	movw	r8, r18
  70:	5e 01       	movw	r10, r28
  72:	6c 01       	movw	r12, r24
  74:	91 01       	movw	r18, r2

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec ef       	ldi	r30, 0xFC	; 252
  8a:	f8 e0       	ldi	r31, 0x08	; 8
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 31       	cpi	r26, 0x10	; 16
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	23 e0       	ldi	r18, 0x03	; 3
  9a:	a0 e1       	ldi	r26, 0x10	; 16
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 34       	cpi	r26, 0x47	; 71
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 28 04 	call	0x850	; 0x850 <main>
  ac:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <putHeaderOnTx>:
	return timeReach;
}

void delayWrite(_delay_t *delay, uint16_t interval){
	delay->interval = interval;
	delay->isRunnig = 0;
  b4:	fc 01       	movw	r30, r24
  b6:	15 82       	std	Z+5, r1	; 0x05
  b8:	a0 81       	ld	r26, Z
  ba:	b1 81       	ldd	r27, Z+1	; 0x01
  bc:	83 81       	ldd	r24, Z+3	; 0x03
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	98 0f       	add	r25, r24
  c2:	93 83       	std	Z+3, r25	; 0x03
  c4:	a8 0f       	add	r26, r24
  c6:	b1 1d       	adc	r27, r1
  c8:	85 e5       	ldi	r24, 0x55	; 85
  ca:	8c 93       	st	X, r24
  cc:	84 81       	ldd	r24, Z+4	; 0x04
  ce:	93 81       	ldd	r25, Z+3	; 0x03
  d0:	98 23       	and	r25, r24
  d2:	a0 81       	ld	r26, Z
  d4:	b1 81       	ldd	r27, Z+1	; 0x01
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	89 0f       	add	r24, r25
  da:	83 83       	std	Z+3, r24	; 0x03
  dc:	a9 0f       	add	r26, r25
  de:	b1 1d       	adc	r27, r1
  e0:	8e e4       	ldi	r24, 0x4E	; 78
  e2:	8c 93       	st	X, r24
  e4:	84 81       	ldd	r24, Z+4	; 0x04
  e6:	93 81       	ldd	r25, Z+3	; 0x03
  e8:	98 23       	and	r25, r24
  ea:	a0 81       	ld	r26, Z
  ec:	b1 81       	ldd	r27, Z+1	; 0x01
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 0f       	add	r24, r25
  f2:	83 83       	std	Z+3, r24	; 0x03
  f4:	a9 0f       	add	r26, r25
  f6:	b1 1d       	adc	r27, r1
  f8:	85 e4       	ldi	r24, 0x45	; 69
  fa:	8c 93       	st	X, r24
  fc:	84 81       	ldd	r24, Z+4	; 0x04
  fe:	93 81       	ldd	r25, Z+3	; 0x03
 100:	98 23       	and	r25, r24
 102:	a0 81       	ld	r26, Z
 104:	b1 81       	ldd	r27, Z+1	; 0x01
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	89 0f       	add	r24, r25
 10a:	83 83       	std	Z+3, r24	; 0x03
 10c:	a9 0f       	add	r26, r25
 10e:	b1 1d       	adc	r27, r1
 110:	82 e5       	ldi	r24, 0x52	; 82
 112:	8c 93       	st	X, r24
 114:	84 81       	ldd	r24, Z+4	; 0x04
 116:	93 81       	ldd	r25, Z+3	; 0x03
 118:	98 23       	and	r25, r24
 11a:	a0 81       	ld	r26, Z
 11c:	b1 81       	ldd	r27, Z+1	; 0x01
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	89 0f       	add	r24, r25
 122:	83 83       	std	Z+3, r24	; 0x03
 124:	a9 0f       	add	r26, r25
 126:	b1 1d       	adc	r27, r1
 128:	4f 5f       	subi	r20, 0xFF	; 255
 12a:	4c 93       	st	X, r20
 12c:	84 81       	ldd	r24, Z+4	; 0x04
 12e:	93 81       	ldd	r25, Z+3	; 0x03
 130:	98 23       	and	r25, r24
 132:	a0 81       	ld	r26, Z
 134:	b1 81       	ldd	r27, Z+1	; 0x01
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	89 0f       	add	r24, r25
 13a:	83 83       	std	Z+3, r24	; 0x03
 13c:	a9 0f       	add	r26, r25
 13e:	b1 1d       	adc	r27, r1
 140:	8a e3       	ldi	r24, 0x3A	; 58
 142:	8c 93       	st	X, r24
 144:	84 81       	ldd	r24, Z+4	; 0x04
 146:	93 81       	ldd	r25, Z+3	; 0x03
 148:	98 23       	and	r25, r24
 14a:	a0 81       	ld	r26, Z
 14c:	b1 81       	ldd	r27, Z+1	; 0x01
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	89 0f       	add	r24, r25
 152:	83 83       	std	Z+3, r24	; 0x03
 154:	a9 0f       	add	r26, r25
 156:	b1 1d       	adc	r27, r1
 158:	6c 93       	st	X, r22
 15a:	94 81       	ldd	r25, Z+4	; 0x04
 15c:	83 81       	ldd	r24, Z+3	; 0x03
 15e:	98 23       	and	r25, r24
 160:	93 83       	std	Z+3, r25	; 0x03
 162:	95 81       	ldd	r25, Z+5	; 0x05
 164:	49 27       	eor	r20, r25
 166:	64 27       	eor	r22, r20
 168:	86 e3       	ldi	r24, 0x36	; 54
 16a:	86 27       	eor	r24, r22
 16c:	85 83       	std	Z+5, r24	; 0x05
 16e:	08 95       	ret

00000170 <putByteOnTx>:
 170:	fc 01       	movw	r30, r24
 172:	a0 81       	ld	r26, Z
 174:	b1 81       	ldd	r27, Z+1	; 0x01
 176:	83 81       	ldd	r24, Z+3	; 0x03
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	98 0f       	add	r25, r24
 17c:	93 83       	std	Z+3, r25	; 0x03
 17e:	a8 0f       	add	r26, r24
 180:	b1 1d       	adc	r27, r1
 182:	6c 93       	st	X, r22
 184:	94 81       	ldd	r25, Z+4	; 0x04
 186:	83 81       	ldd	r24, Z+3	; 0x03
 188:	98 23       	and	r25, r24
 18a:	93 83       	std	Z+3, r25	; 0x03
 18c:	85 81       	ldd	r24, Z+5	; 0x05
 18e:	86 27       	eor	r24, r22
 190:	85 83       	std	Z+5, r24	; 0x05
 192:	08 95       	ret

00000194 <putStrOntx>:
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	fc 01       	movw	r30, r24
 19a:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <globalIndex>
 19e:	1b c0       	rjmp	.+54     	; 0x1d6 <putStrOntx+0x42>
 1a0:	a0 81       	ld	r26, Z
 1a2:	b1 81       	ldd	r27, Z+1	; 0x01
 1a4:	83 81       	ldd	r24, Z+3	; 0x03
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	98 0f       	add	r25, r24
 1aa:	93 83       	std	Z+3, r25	; 0x03
 1ac:	a8 0f       	add	r26, r24
 1ae:	b1 1d       	adc	r27, r1
 1b0:	88 81       	ld	r24, Y
 1b2:	8c 93       	st	X, r24
 1b4:	84 81       	ldd	r24, Z+4	; 0x04
 1b6:	93 81       	ldd	r25, Z+3	; 0x03
 1b8:	89 23       	and	r24, r25
 1ba:	83 83       	std	Z+3, r24	; 0x03
 1bc:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <globalIndex>
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	98 0f       	add	r25, r24
 1c4:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <globalIndex>
 1c8:	db 01       	movw	r26, r22
 1ca:	a8 0f       	add	r26, r24
 1cc:	b1 1d       	adc	r27, r1
 1ce:	8c 91       	ld	r24, X
 1d0:	95 81       	ldd	r25, Z+5	; 0x05
 1d2:	89 27       	eor	r24, r25
 1d4:	85 83       	std	Z+5, r24	; 0x05
 1d6:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <globalIndex>
 1da:	eb 01       	movw	r28, r22
 1dc:	c8 0f       	add	r28, r24
 1de:	d1 1d       	adc	r29, r1
 1e0:	88 81       	ld	r24, Y
 1e2:	81 11       	cpse	r24, r1
 1e4:	dd cf       	rjmp	.-70     	; 0x1a0 <putStrOntx+0xc>
 1e6:	85 81       	ldd	r24, Z+5	; 0x05
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <decodeHeader>:
 1ee:	dc 01       	movw	r26, r24
 1f0:	13 96       	adiw	r26, 0x03	; 3
 1f2:	2c 91       	ld	r18, X
 1f4:	13 97       	sbiw	r26, 0x03	; 3
 1f6:	cd c0       	rjmp	.+410    	; 0x392 <decodeHeader+0x1a4>
 1f8:	18 96       	adiw	r26, 0x08	; 8
 1fa:	ec 91       	ld	r30, X
 1fc:	18 97       	sbiw	r26, 0x08	; 8
 1fe:	4e 2f       	mov	r20, r30
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	47 30       	cpi	r20, 0x07	; 7
 204:	51 05       	cpc	r21, r1
 206:	08 f0       	brcs	.+2      	; 0x20a <decodeHeader+0x1c>
 208:	b6 c0       	rjmp	.+364    	; 0x376 <decodeHeader+0x188>
 20a:	fa 01       	movw	r30, r20
 20c:	ec 5c       	subi	r30, 0xCC	; 204
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__tablejump2__>
 214:	ed 91       	ld	r30, X+
 216:	fc 91       	ld	r31, X
 218:	11 97       	sbiw	r26, 0x01	; 1
 21a:	e8 0f       	add	r30, r24
 21c:	f1 1d       	adc	r31, r1
 21e:	80 81       	ld	r24, Z
 220:	85 35       	cpi	r24, 0x55	; 85
 222:	09 f0       	breq	.+2      	; 0x226 <decodeHeader+0x38>
 224:	ab c0       	rjmp	.+342    	; 0x37c <decodeHeader+0x18e>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	18 96       	adiw	r26, 0x08	; 8
 22a:	8c 93       	st	X, r24
 22c:	18 97       	sbiw	r26, 0x08	; 8
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	19 96       	adiw	r26, 0x09	; 9
 232:	8c 93       	st	X, r24
 234:	19 97       	sbiw	r26, 0x09	; 9
 236:	a2 c0       	rjmp	.+324    	; 0x37c <decodeHeader+0x18e>
 238:	ed 91       	ld	r30, X+
 23a:	fc 91       	ld	r31, X
 23c:	11 97       	sbiw	r26, 0x01	; 1
 23e:	e8 0f       	add	r30, r24
 240:	f1 1d       	adc	r31, r1
 242:	90 81       	ld	r25, Z
 244:	9e 34       	cpi	r25, 0x4E	; 78
 246:	29 f4       	brne	.+10     	; 0x252 <decodeHeader+0x64>
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	18 96       	adiw	r26, 0x08	; 8
 24c:	8c 93       	st	X, r24
 24e:	18 97       	sbiw	r26, 0x08	; 8
 250:	95 c0       	rjmp	.+298    	; 0x37c <decodeHeader+0x18e>
 252:	95 35       	cpi	r25, 0x55	; 85
 254:	09 f4       	brne	.+2      	; 0x258 <decodeHeader+0x6a>
 256:	92 c0       	rjmp	.+292    	; 0x37c <decodeHeader+0x18e>
 258:	18 96       	adiw	r26, 0x08	; 8
 25a:	1c 92       	st	X, r1
 25c:	18 97       	sbiw	r26, 0x08	; 8
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	12 96       	adiw	r26, 0x02	; 2
 262:	8c 93       	st	X, r24
 264:	12 97       	sbiw	r26, 0x02	; 2
 266:	8a c0       	rjmp	.+276    	; 0x37c <decodeHeader+0x18e>
 268:	ed 91       	ld	r30, X+
 26a:	fc 91       	ld	r31, X
 26c:	11 97       	sbiw	r26, 0x01	; 1
 26e:	e8 0f       	add	r30, r24
 270:	f1 1d       	adc	r31, r1
 272:	90 81       	ld	r25, Z
 274:	95 34       	cpi	r25, 0x45	; 69
 276:	29 f4       	brne	.+10     	; 0x282 <decodeHeader+0x94>
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	18 96       	adiw	r26, 0x08	; 8
 27c:	8c 93       	st	X, r24
 27e:	18 97       	sbiw	r26, 0x08	; 8
 280:	7d c0       	rjmp	.+250    	; 0x37c <decodeHeader+0x18e>
 282:	18 96       	adiw	r26, 0x08	; 8
 284:	1c 92       	st	X, r1
 286:	18 97       	sbiw	r26, 0x08	; 8
 288:	81 50       	subi	r24, 0x01	; 1
 28a:	12 96       	adiw	r26, 0x02	; 2
 28c:	8c 93       	st	X, r24
 28e:	12 97       	sbiw	r26, 0x02	; 2
 290:	75 c0       	rjmp	.+234    	; 0x37c <decodeHeader+0x18e>
 292:	ed 91       	ld	r30, X+
 294:	fc 91       	ld	r31, X
 296:	11 97       	sbiw	r26, 0x01	; 1
 298:	e8 0f       	add	r30, r24
 29a:	f1 1d       	adc	r31, r1
 29c:	90 81       	ld	r25, Z
 29e:	92 35       	cpi	r25, 0x52	; 82
 2a0:	29 f4       	brne	.+10     	; 0x2ac <decodeHeader+0xbe>
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	18 96       	adiw	r26, 0x08	; 8
 2a6:	8c 93       	st	X, r24
 2a8:	18 97       	sbiw	r26, 0x08	; 8
 2aa:	68 c0       	rjmp	.+208    	; 0x37c <decodeHeader+0x18e>
 2ac:	18 96       	adiw	r26, 0x08	; 8
 2ae:	1c 92       	st	X, r1
 2b0:	18 97       	sbiw	r26, 0x08	; 8
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	12 96       	adiw	r26, 0x02	; 2
 2b6:	8c 93       	st	X, r24
 2b8:	12 97       	sbiw	r26, 0x02	; 2
 2ba:	60 c0       	rjmp	.+192    	; 0x37c <decodeHeader+0x18e>
 2bc:	ed 91       	ld	r30, X+
 2be:	fc 91       	ld	r31, X
 2c0:	11 97       	sbiw	r26, 0x01	; 1
 2c2:	e8 0f       	add	r30, r24
 2c4:	f1 1d       	adc	r31, r1
 2c6:	80 81       	ld	r24, Z
 2c8:	17 96       	adiw	r26, 0x07	; 7
 2ca:	8c 93       	st	X, r24
 2cc:	17 97       	sbiw	r26, 0x07	; 7
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	18 96       	adiw	r26, 0x08	; 8
 2d2:	8c 93       	st	X, r24
 2d4:	18 97       	sbiw	r26, 0x08	; 8
 2d6:	52 c0       	rjmp	.+164    	; 0x37c <decodeHeader+0x18e>
 2d8:	ed 91       	ld	r30, X+
 2da:	fc 91       	ld	r31, X
 2dc:	11 97       	sbiw	r26, 0x01	; 1
 2de:	e8 0f       	add	r30, r24
 2e0:	f1 1d       	adc	r31, r1
 2e2:	90 81       	ld	r25, Z
 2e4:	9a 33       	cpi	r25, 0x3A	; 58
 2e6:	a9 f4       	brne	.+42     	; 0x312 <decodeHeader+0x124>
 2e8:	96 e0       	ldi	r25, 0x06	; 6
 2ea:	18 96       	adiw	r26, 0x08	; 8
 2ec:	9c 93       	st	X, r25
 2ee:	18 97       	sbiw	r26, 0x08	; 8
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	15 96       	adiw	r26, 0x05	; 5
 2f4:	9c 91       	ld	r25, X
 2f6:	15 97       	sbiw	r26, 0x05	; 5
 2f8:	89 23       	and	r24, r25
 2fa:	14 96       	adiw	r26, 0x04	; 4
 2fc:	8c 93       	st	X, r24
 2fe:	14 97       	sbiw	r26, 0x04	; 4
 300:	17 96       	adiw	r26, 0x07	; 7
 302:	9c 91       	ld	r25, X
 304:	17 97       	sbiw	r26, 0x07	; 7
 306:	86 e3       	ldi	r24, 0x36	; 54
 308:	89 27       	eor	r24, r25
 30a:	16 96       	adiw	r26, 0x06	; 6
 30c:	8c 93       	st	X, r24
 30e:	16 97       	sbiw	r26, 0x06	; 6
 310:	35 c0       	rjmp	.+106    	; 0x37c <decodeHeader+0x18e>
 312:	18 96       	adiw	r26, 0x08	; 8
 314:	1c 92       	st	X, r1
 316:	18 97       	sbiw	r26, 0x08	; 8
 318:	81 50       	subi	r24, 0x01	; 1
 31a:	12 96       	adiw	r26, 0x02	; 2
 31c:	8c 93       	st	X, r24
 31e:	12 97       	sbiw	r26, 0x02	; 2
 320:	2d c0       	rjmp	.+90     	; 0x37c <decodeHeader+0x18e>
 322:	17 96       	adiw	r26, 0x07	; 7
 324:	9c 91       	ld	r25, X
 326:	17 97       	sbiw	r26, 0x07	; 7
 328:	91 50       	subi	r25, 0x01	; 1
 32a:	17 96       	adiw	r26, 0x07	; 7
 32c:	9c 93       	st	X, r25
 32e:	17 97       	sbiw	r26, 0x07	; 7
 330:	99 23       	and	r25, r25
 332:	71 f0       	breq	.+28     	; 0x350 <decodeHeader+0x162>
 334:	ed 91       	ld	r30, X+
 336:	fc 91       	ld	r31, X
 338:	11 97       	sbiw	r26, 0x01	; 1
 33a:	e8 0f       	add	r30, r24
 33c:	f1 1d       	adc	r31, r1
 33e:	80 81       	ld	r24, Z
 340:	16 96       	adiw	r26, 0x06	; 6
 342:	9c 91       	ld	r25, X
 344:	16 97       	sbiw	r26, 0x06	; 6
 346:	89 27       	eor	r24, r25
 348:	16 96       	adiw	r26, 0x06	; 6
 34a:	8c 93       	st	X, r24
 34c:	16 97       	sbiw	r26, 0x06	; 6
 34e:	16 c0       	rjmp	.+44     	; 0x37c <decodeHeader+0x18e>
 350:	18 96       	adiw	r26, 0x08	; 8
 352:	1c 92       	st	X, r1
 354:	18 97       	sbiw	r26, 0x08	; 8
 356:	ed 91       	ld	r30, X+
 358:	fc 91       	ld	r31, X
 35a:	11 97       	sbiw	r26, 0x01	; 1
 35c:	e8 0f       	add	r30, r24
 35e:	f1 1d       	adc	r31, r1
 360:	90 81       	ld	r25, Z
 362:	16 96       	adiw	r26, 0x06	; 6
 364:	8c 91       	ld	r24, X
 366:	16 97       	sbiw	r26, 0x06	; 6
 368:	98 13       	cpse	r25, r24
 36a:	08 c0       	rjmp	.+16     	; 0x37c <decodeHeader+0x18e>
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	1a 96       	adiw	r26, 0x0a	; 10
 370:	8c 93       	st	X, r24
 372:	1a 97       	sbiw	r26, 0x0a	; 10
 374:	03 c0       	rjmp	.+6      	; 0x37c <decodeHeader+0x18e>
 376:	18 96       	adiw	r26, 0x08	; 8
 378:	1c 92       	st	X, r1
 37a:	18 97       	sbiw	r26, 0x08	; 8
 37c:	12 96       	adiw	r26, 0x02	; 2
 37e:	8c 91       	ld	r24, X
 380:	12 97       	sbiw	r26, 0x02	; 2
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	15 96       	adiw	r26, 0x05	; 5
 386:	9c 91       	ld	r25, X
 388:	15 97       	sbiw	r26, 0x05	; 5
 38a:	89 23       	and	r24, r25
 38c:	12 96       	adiw	r26, 0x02	; 2
 38e:	8c 93       	st	X, r24
 390:	12 97       	sbiw	r26, 0x02	; 2
 392:	12 96       	adiw	r26, 0x02	; 2
 394:	8c 91       	ld	r24, X
 396:	12 97       	sbiw	r26, 0x02	; 2
 398:	28 13       	cpse	r18, r24
 39a:	2e cf       	rjmp	.-420    	; 0x1f8 <decodeHeader+0xa>
 39c:	08 95       	ret

0000039e <decodeCommand>:
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	eb 01       	movw	r28, r22
 3a8:	dc 01       	movw	r26, r24
 3aa:	ed 91       	ld	r30, X+
 3ac:	fc 91       	ld	r31, X
 3ae:	11 97       	sbiw	r26, 0x01	; 1
 3b0:	14 96       	adiw	r26, 0x04	; 4
 3b2:	8c 91       	ld	r24, X
 3b4:	e8 0f       	add	r30, r24
 3b6:	f1 1d       	adc	r31, r1
 3b8:	60 81       	ld	r22, Z
 3ba:	60 3f       	cpi	r22, 0xF0	; 240
 3bc:	31 f0       	breq	.+12     	; 0x3ca <decodeCommand+0x2c>
 3be:	61 3f       	cpi	r22, 0xF1	; 241
 3c0:	91 f0       	breq	.+36     	; 0x3e6 <decodeCommand+0x48>
 3c2:	63 3a       	cpi	r22, 0xA3	; 163
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <decodeCommand+0x2a>
 3c6:	50 c0       	rjmp	.+160    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 3c8:	1d c0       	rjmp	.+58     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ca:	42 e0       	ldi	r20, 0x02	; 2
 3cc:	60 ef       	ldi	r22, 0xF0	; 240
 3ce:	ce 01       	movw	r24, r28
 3d0:	0e 94 5a 00 	call	0xb4	; 0xb4 <putHeaderOnTx>
 3d4:	6d e0       	ldi	r22, 0x0D	; 13
 3d6:	ce 01       	movw	r24, r28
 3d8:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 3dc:	6d 81       	ldd	r22, Y+5	; 0x05
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 3e4:	4d c0       	rjmp	.+154    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 3e6:	4c e0       	ldi	r20, 0x0C	; 12
 3e8:	61 ef       	ldi	r22, 0xF1	; 241
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <putHeaderOnTx>
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	71 e0       	ldi	r23, 0x01	; 1
 3f4:	ce 01       	movw	r24, r28
 3f6:	0e 94 ca 00 	call	0x194	; 0x194 <putStrOntx>
 3fa:	6d 81       	ldd	r22, Y+5	; 0x05
 3fc:	ce 01       	movw	r24, r28
 3fe:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 402:	3e c0       	rjmp	.+124    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 404:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 408:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 40c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_end+0x2>
 410:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_end+0x3>
 414:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <myWord>
 418:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <myWord+0x1>
 41c:	a0 93 44 02 	sts	0x0244, r26	; 0x800244 <myWord+0x2>
 420:	b0 93 45 02 	sts	0x0245, r27	; 0x800245 <myWord+0x3>
 424:	45 e0       	ldi	r20, 0x05	; 5
 426:	63 ea       	ldi	r22, 0xA3	; 163
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 5a 00 	call	0xb4	; 0xb4 <putHeaderOnTx>
 42e:	02 e4       	ldi	r16, 0x42	; 66
 430:	12 e0       	ldi	r17, 0x02	; 2
 432:	f8 01       	movw	r30, r16
 434:	60 81       	ld	r22, Z
 436:	ce 01       	movw	r24, r28
 438:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 43c:	d8 01       	movw	r26, r16
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	6c 91       	ld	r22, X
 442:	ce 01       	movw	r24, r28
 444:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 448:	f8 01       	movw	r30, r16
 44a:	62 81       	ldd	r22, Z+2	; 0x02
 44c:	ce 01       	movw	r24, r28
 44e:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 452:	d8 01       	movw	r26, r16
 454:	13 96       	adiw	r26, 0x03	; 3
 456:	6c 91       	ld	r22, X
 458:	ce 01       	movw	r24, r28
 45a:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 45e:	6d 81       	ldd	r22, Y+5	; 0x05
 460:	ce 01       	movw	r24, r28
 462:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 466:	0c c0       	rjmp	.+24     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 468:	42 e0       	ldi	r20, 0x02	; 2
 46a:	ce 01       	movw	r24, r28
 46c:	0e 94 5a 00 	call	0xb4	; 0xb4 <putHeaderOnTx>
 470:	6f ef       	ldi	r22, 0xFF	; 255
 472:	ce 01       	movw	r24, r28
 474:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 478:	6d 81       	ldd	r22, Y+5	; 0x05
 47a:	ce 01       	movw	r24, r28
 47c:	0e 94 b8 00 	call	0x170	; 0x170 <putByteOnTx>
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <do10ms>:
 48a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time10ms>
 48e:	81 11       	cpse	r24, r1
 490:	06 c0       	rjmp	.+12     	; 0x49e <do10ms+0x14>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <is10ms>
 498:	8a e0       	ldi	r24, 0x0A	; 10
 49a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time10ms>
 49e:	08 95       	ret

000004a0 <do100ms>:
 4a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a4:	81 11       	cpse	r24, r1
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <do100ms+0x16>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <is100ms>
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4b4:	08 95       	ret
 4b6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <is10ms>
 4ba:	91 30       	cpi	r25, 0x01	; 1
 4bc:	39 f4       	brne	.+14     	; 0x4cc <do100ms+0x2c>
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4c4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <is100ms>
 4c8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <is10ms>
 4cc:	08 95       	ret

000004ce <delayConfig>:
 4ce:	fc 01       	movw	r30, r24
 4d0:	75 83       	std	Z+5, r23	; 0x05
 4d2:	64 83       	std	Z+4, r22	; 0x04
 4d4:	16 82       	std	Z+6, r1	; 0x06
 4d6:	08 95       	ret

000004d8 <millis>:
}

uint32_t millis()
{
	uint32_t savedMillis;
	sei();
 4d8:	78 94       	sei
		savedMillis = MillisCounter;	
 4da:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <MillisCounter>
 4de:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <MillisCounter+0x1>
 4e2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <MillisCounter+0x2>
 4e6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <MillisCounter+0x3>
	cli();
 4ea:	f8 94       	cli
	return savedMillis;
}
 4ec:	08 95       	ret

000004ee <delayRead>:
void delayConfig(_delay_t *delay, uint16_t  interval){
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
	uint8_t timeReach=0;
	if(!delay->isRunnig){
 4f8:	8e 81       	ldd	r24, Y+6	; 0x06
 4fa:	81 11       	cpse	r24, r1
 4fc:	0a c0       	rjmp	.+20     	; 0x512 <delayRead+0x24>
		delay->isRunnig = 1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	8e 83       	std	Y+6, r24	; 0x06
		delay->startTime = millis();
 502:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <millis>
 506:	68 83       	st	Y, r22
 508:	79 83       	std	Y+1, r23	; 0x01
 50a:	8a 83       	std	Y+2, r24	; 0x02
 50c:	9b 83       	std	Y+3, r25	; 0x03
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
	uint8_t timeReach=0;
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	19 c0       	rjmp	.+50     	; 0x544 <delayRead+0x56>
	if(!delay->isRunnig){
		delay->isRunnig = 1;
		delay->startTime = millis();
		}else{
		if((millis()-delay->startTime)>=delay->interval){
 512:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <millis>
 516:	08 81       	ld	r16, Y
 518:	19 81       	ldd	r17, Y+1	; 0x01
 51a:	2a 81       	ldd	r18, Y+2	; 0x02
 51c:	3b 81       	ldd	r19, Y+3	; 0x03
 51e:	ab 01       	movw	r20, r22
 520:	bc 01       	movw	r22, r24
 522:	40 1b       	sub	r20, r16
 524:	51 0b       	sbc	r21, r17
 526:	62 0b       	sbc	r22, r18
 528:	73 0b       	sbc	r23, r19
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	9d 81       	ldd	r25, Y+5	; 0x05
 52e:	a0 e0       	ldi	r26, 0x00	; 0
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	48 17       	cp	r20, r24
 534:	59 07       	cpc	r21, r25
 536:	6a 07       	cpc	r22, r26
 538:	7b 07       	cpc	r23, r27
 53a:	18 f0       	brcs	.+6      	; 0x542 <delayRead+0x54>
			timeReach = 1;
			delay->isRunnig = 0;
 53c:	1e 82       	std	Y+6, r1	; 0x06
	if(!delay->isRunnig){
		delay->isRunnig = 1;
		delay->startTime = millis();
		}else{
		if((millis()-delay->startTime)>=delay->interval){
			timeReach = 1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	01 c0       	rjmp	.+2      	; 0x544 <delayRead+0x56>
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
	uint8_t timeReach=0;
 542:	80 e0       	ldi	r24, 0x00	; 0
			timeReach = 1;
			delay->isRunnig = 0;
		}
	}
	return timeReach;
}
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	08 95       	ret

0000054e <serialTask>:

/* Function prototypes user code ----------------------------------------------*/

//CONEXION SERIAL - WIFI
void serialTask(_sRx *dataRx, _sTx *dataTx)
{
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	ec 01       	movw	r28, r24
 558:	8b 01       	movw	r16, r22
	
    if(dataRx->isComannd){
 55a:	8a 85       	ldd	r24, Y+10	; 0x0a
 55c:	88 23       	and	r24, r24
 55e:	21 f0       	breq	.+8      	; 0x568 <serialTask+0x1a>
        dataRx->isComannd=0; //false reemplazado por 0
 560:	1a 86       	std	Y+10, r1	; 0x0a
		
        decodeCommand(dataRx,dataTx);
 562:	ce 01       	movw	r24, r28
 564:	0e 94 cf 01 	call	0x39e	; 0x39e <decodeCommand>
    }

	//Revisamos si llego un nuevo dato en el serie
	if(delayRead(&generalTime)){
 568:	89 e3       	ldi	r24, 0x39	; 57
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	0e 94 77 02 	call	0x4ee	; 0x4ee <delayRead>
 570:	88 23       	and	r24, r24
 572:	49 f0       	breq	.+18     	; 0x586 <serialTask+0x38>
		if(dataRx->header){
 574:	88 85       	ldd	r24, Y+8	; 0x08
 576:	88 23       	and	r24, r24
 578:	31 f0       	breq	.+12     	; 0x586 <serialTask+0x38>
			dataRx->timeOut--;
 57a:	89 85       	ldd	r24, Y+9	; 0x09
 57c:	81 50       	subi	r24, 0x01	; 1
 57e:	89 87       	std	Y+9, r24	; 0x09
			if(!dataRx->timeOut)
 580:	81 11       	cpse	r24, r1
 582:	01 c0       	rjmp	.+2      	; 0x586 <serialTask+0x38>
			dataRx->header = HEADER_U;
 584:	18 86       	std	Y+8, r1	; 0x08
			//PORTB |= (1<<LEDBUILTIN); //LedOn
		}
	}
	
    if(dataRx->indexR!=dataRx->indexW){
 586:	9a 81       	ldd	r25, Y+2	; 0x02
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	98 17       	cp	r25, r24
 58c:	19 f0       	breq	.+6      	; 0x594 <serialTask+0x46>
		
        decodeHeader(dataRx);
 58e:	ce 01       	movw	r24, r28
 590:	0e 94 f7 00 	call	0x1ee	; 0x1ee <decodeHeader>
    } 	

    if(dataTx->indexR!=dataTx->indexW)
 594:	d8 01       	movw	r26, r16
 596:	12 96       	adiw	r26, 0x02	; 2
 598:	8c 91       	ld	r24, X
 59a:	12 97       	sbiw	r26, 0x02	; 2
 59c:	13 96       	adiw	r26, 0x03	; 3
 59e:	9c 91       	ld	r25, X
 5a0:	13 97       	sbiw	r26, 0x03	; 3
 5a2:	89 17       	cp	r24, r25
 5a4:	d1 f0       	breq	.+52     	; 0x5da <serialTask+0x8c>
	{
		if(UCSR0A & (1 << UDRE0))
 5a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5aa:	95 ff       	sbrs	r25, 5
 5ac:	16 c0       	rjmp	.+44     	; 0x5da <serialTask+0x8c>
		{
			UDR0=dataTx->buff[dataTx->indexR++];
 5ae:	ed 91       	ld	r30, X+
 5b0:	fc 91       	ld	r31, X
 5b2:	11 97       	sbiw	r26, 0x01	; 1
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	98 0f       	add	r25, r24
 5b8:	12 96       	adiw	r26, 0x02	; 2
 5ba:	9c 93       	st	X, r25
 5bc:	12 97       	sbiw	r26, 0x02	; 2
 5be:	e8 0f       	add	r30, r24
 5c0:	f1 1d       	adc	r31, r1
 5c2:	80 81       	ld	r24, Z
 5c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			dataTx->indexR &=dataTx->mask;
 5c8:	14 96       	adiw	r26, 0x04	; 4
 5ca:	8c 91       	ld	r24, X
 5cc:	14 97       	sbiw	r26, 0x04	; 4
 5ce:	12 96       	adiw	r26, 0x02	; 2
 5d0:	9c 91       	ld	r25, X
 5d2:	12 97       	sbiw	r26, 0x02	; 2
 5d4:	89 23       	and	r24, r25
 5d6:	12 96       	adiw	r26, 0x02	; 2
 5d8:	8c 93       	st	X, r24
		}
    }

}
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	08 95       	ret

000005e4 <getDistance>:
	cli();
	return savedMillis;
}

void getDistance()
{
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
	if(triggerDone && okDistance) //ofDistance control para si ya se guardaron los valores de endtime y starttime
 5e8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <triggerDone>
 5ec:	88 23       	and	r24, r24
 5ee:	41 f1       	breq	.+80     	; 0x640 <getDistance+0x5c>
 5f0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <okDistance>
 5f4:	88 23       	and	r24, r24
 5f6:	21 f1       	breq	.+72     	; 0x640 <getDistance+0x5c>
	{ 
		distance = (endTime - startTime)/2; //distancia [cm]
 5f8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <endTime>
 5fc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <endTime+0x1>
 600:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <endTime+0x2>
 604:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <endTime+0x3>
 608:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <startTime>
 60c:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <startTime+0x1>
 610:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <startTime+0x2>
 614:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <startTime+0x3>
 618:	84 1b       	sub	r24, r20
 61a:	95 0b       	sbc	r25, r21
 61c:	a6 0b       	sbc	r26, r22
 61e:	b7 0b       	sbc	r27, r23
 620:	b6 95       	lsr	r27
 622:	a7 95       	ror	r26
 624:	97 95       	ror	r25
 626:	87 95       	ror	r24
 628:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 62c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 630:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
 634:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
		triggerDone = 0;
 638:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <triggerDone>
		okDistance = 0; //Preparamos para otra medida
 63c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <okDistance>
	}
	if((millis() - echoTimeout) > 100) //Pasaron mas de 100ms y no se recibe el echo
 640:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <millis>
 644:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <echoTimeout>
 648:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <echoTimeout+0x1>
 64c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <echoTimeout+0x2>
 650:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <echoTimeout+0x3>
 654:	dc 01       	movw	r26, r24
 656:	cb 01       	movw	r24, r22
 658:	80 1b       	sub	r24, r16
 65a:	91 0b       	sbc	r25, r17
 65c:	a2 0b       	sbc	r26, r18
 65e:	b3 0b       	sbc	r27, r19
 660:	85 36       	cpi	r24, 0x65	; 101
 662:	91 05       	cpc	r25, r1
 664:	a1 05       	cpc	r26, r1
 666:	b1 05       	cpc	r27, r1
 668:	10 f0       	brcs	.+4      	; 0x66e <getDistance+0x8a>
		triggerDone = 0;
 66a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <triggerDone>
}
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	08 95       	ret

00000674 <triggerTask>:

void triggerTask(){
	if(is100ms && !triggerDone) //ejecuci?n cada 100ms y que no haya ocurrido un trigger
 674:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <is100ms>
 678:	88 23       	and	r24, r24
 67a:	c1 f0       	breq	.+48     	; 0x6ac <triggerTask+0x38>
 67c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <triggerDone>
 680:	81 11       	cpse	r24, r1
 682:	14 c0       	rjmp	.+40     	; 0x6ac <triggerTask+0x38>
	{
		PORTB |= (1<<TRIG); //Comenzamos el pulso
 684:	85 b1       	in	r24, 0x05	; 5
 686:	82 60       	ori	r24, 0x02	; 2
 688:	85 b9       	out	0x05, r24	; 5
		OCR1B += 20; //Espera de 10us en alto
 68a:	ea e8       	ldi	r30, 0x8A	; 138
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	91 81       	ldd	r25, Z+1	; 0x01
 692:	44 96       	adiw	r24, 0x14	; 20
 694:	91 83       	std	Z+1, r25	; 0x01
 696:	80 83       	st	Z, r24
		echoTimeout = millis();
 698:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <millis>
 69c:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <echoTimeout>
 6a0:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <echoTimeout+0x1>
 6a4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <echoTimeout+0x2>
 6a8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <echoTimeout+0x3>
 6ac:	08 95       	ret

000006ae <initUSART0>:
}

void initUSART0()
{
	//USART -> 115200 bd
	UCSR0A = 0xFE;
 6ae:	8e ef       	ldi	r24, 0xFE	; 254
 6b0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 6b4:	88 e9       	ldi	r24, 0x98	; 152
 6b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0x06;
 6ba:	86 e0       	ldi	r24, 0x06	; 6
 6bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = 16;
 6c0:	80 e1       	ldi	r24, 0x10	; 16
 6c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = 0;
 6c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6ca:	08 95       	ret

000006cc <initTimer0>:
}

void initTimer0()
{
	//Timer -> modo CTC - fclk/64 - CR0A: 249 -> 1ms
	TCCR0A = 0x02;
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Seteo del prescaler
 6d0:	93 e0       	ldi	r25, 0x03	; 3
 6d2:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 0x00;
 6d4:	16 bc       	out	0x26, r1	; 38
	TIFR0 = 0x07;
 6d6:	97 e0       	ldi	r25, 0x07	; 7
 6d8:	95 bb       	out	0x15, r25	; 21
	//OCR0A = 125;
	OCR0A = 249; //Comienza en 0 
 6da:	99 ef       	ldi	r25, 0xF9	; 249
 6dc:	97 bd       	out	0x27, r25	; 39
	//TIMSK0 |= (1 << OCIE0A);
	TIMSK0 = 0x02;
 6de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 6e2:	08 95       	ret

000006e4 <initTimer1>:
}

void initTimer1()
{
	//Configuraci?n para funcionamiento normal - fclk/8 -> 2Mhz - 0,5uS
	TCNT1 = 0;
 6e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 6e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0;
 6ec:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	
	//TCCR1B = 0xC2; //Timer en 2mHz con preescaler de 8, y tambien se configura para esperar un flanco ascendente en el ICP1
	TCCR1B=(1<<ICNC1) | (1<<ICES1) | (0<<CS12) | (1<<CS11) | (0<<CS10); //Activamos la cancelacion de ruido y el preescaler a 8
 6f0:	82 ec       	ldi	r24, 0xC2	; 194
 6f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1B) | (1 << ICIE1); //Habilitamos la interrupci?n por captura de entrada ICIE1
 6f6:	84 e2       	ldi	r24, 0x24	; 36
 6f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	TIFR1 = TIFR1; //Hacemos 0 las banderas
 6fc:	86 b3       	in	r24, 0x16	; 22
 6fe:	86 bb       	out	0x16, r24	; 22
 700:	08 95       	ret

00000702 <__vector_18>:
}

//INTERRUPTS
// Rutina de servicio de interrupci?n (ISR) para recepci?n USART
ISR(USART_RX_vect) // Vector 19 (0x0024)
{	
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	dataRx.buff[dataRx.indexW++] = UDR0;
 718:	e8 e2       	ldi	r30, 0x28	; 40
 71a:	f2 e0       	ldi	r31, 0x02	; 2
 71c:	a0 81       	ld	r26, Z
 71e:	b1 81       	ldd	r27, Z+1	; 0x01
 720:	83 81       	ldd	r24, Z+3	; 0x03
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	98 0f       	add	r25, r24
 726:	93 83       	std	Z+3, r25	; 0x03
 728:	a8 0f       	add	r26, r24
 72a:	b1 1d       	adc	r27, r1
 72c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 730:	8c 93       	st	X, r24
	dataRx.indexW &= dataRx.mask;
 732:	95 81       	ldd	r25, Z+5	; 0x05
 734:	83 81       	ldd	r24, Z+3	; 0x03
 736:	89 23       	and	r24, r25
 738:	83 83       	std	Z+3, r24	; 0x03
}
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <__vector_14>:

// Rutina de servicio de interrupci?n (ISR) para Timer0 Compare Match A
ISR(TIMER0_COMPA_vect) // Vector 15 (0x001C)
{
 750:	1f 92       	push	r1
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	11 24       	eor	r1, r1
 75a:	8f 93       	push	r24
 75c:	9f 93       	push	r25
 75e:	af 93       	push	r26
 760:	bf 93       	push	r27
	MillisCounter++;
 762:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <MillisCounter>
 766:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <MillisCounter+0x1>
 76a:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <MillisCounter+0x2>
 76e:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <MillisCounter+0x3>
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	a1 1d       	adc	r26, r1
 776:	b1 1d       	adc	r27, r1
 778:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <MillisCounter>
 77c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <MillisCounter+0x1>
 780:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <MillisCounter+0x2>
 784:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <MillisCounter+0x3>
	time10ms--;
 788:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time10ms>
 78c:	81 50       	subi	r24, 0x01	; 1
 78e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time10ms>
}
 792:	bf 91       	pop	r27
 794:	af 91       	pop	r26
 796:	9f 91       	pop	r25
 798:	8f 91       	pop	r24
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <__vector_12>:

//Interrupci?n cada 10us
ISR(TIMER1_COMPB_vect){	
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	8f 93       	push	r24
	triggerDone = 1; //Bandera para seguir adelante con la ejecuci?n del codigo
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <triggerDone>
	PORTB &= ~(1<<TRIG); //Finalizamos el pulso
 7b6:	85 b1       	in	r24, 0x05	; 5
 7b8:	8d 7f       	andi	r24, 0xFD	; 253
 7ba:	85 b9       	out	0x05, r24	; 5
}
 7bc:	8f 91       	pop	r24
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <__vector_10>:
/*
ICES = 0 -> falling (negative) edge 
ICES = 1 -> rising (positive) edge
*/
//Captura del flanco 
ISR(TIMER1_CAPT_vect){
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	8f 93       	push	r24
 7d4:	9f 93       	push	r25
 7d6:	af 93       	push	r26
 7d8:	bf 93       	push	r27
 7da:	ef 93       	push	r30
 7dc:	ff 93       	push	r31
	if (TCCR1B & (1 << ICES1)) // Pin es 1, flanco ascendente inicio del eco
 7de:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 7e2:	86 ff       	sbrs	r24, 6
 7e4:	14 c0       	rjmp	.+40     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	{ 
		startTime = ICR1; //guardamos el tiempo en ese instante
 7e6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 7ea:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 7ee:	a0 e0       	ldi	r26, 0x00	; 0
 7f0:	b0 e0       	ldi	r27, 0x00	; 0
 7f2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <startTime>
 7f6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <startTime+0x1>
 7fa:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <startTime+0x2>
 7fe:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <startTime+0x3>
		TCCR1B &= ~(1 << ICES1);  // Configurar a 0 valor de ICES1 para flanco descendente
 802:	e1 e8       	ldi	r30, 0x81	; 129
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	8f 7b       	andi	r24, 0xBF	; 191
 80a:	80 83       	st	Z, r24
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
	}
	else // Flanco descendente (fin del eco)
	{  
		endTime = ICR1;
 80e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 812:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 816:	a0 e0       	ldi	r26, 0x00	; 0
 818:	b0 e0       	ldi	r27, 0x00	; 0
 81a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <endTime>
 81e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <endTime+0x1>
 822:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <endTime+0x2>
 826:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <endTime+0x3>
		okDistance = 1; // bandera
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <okDistance>
		TCCR1B |= (1 << ICES1);   // Resetear para pr?ximo flanco ascendente
 830:	e1 e8       	ldi	r30, 0x81	; 129
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	80 64       	ori	r24, 0x40	; 64
 838:	80 83       	st	Z, r24
	}
}
 83a:	ff 91       	pop	r31
 83c:	ef 91       	pop	r30
 83e:	bf 91       	pop	r27
 840:	af 91       	pop	r26
 842:	9f 91       	pop	r25
 844:	8f 91       	pop	r24
 846:	0f 90       	pop	r0
 848:	0f be       	out	0x3f, r0	; 63
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <main>:

/* END Function prototypes user code ------------------------------------------*/

int main()
{
	cli();
 850:	f8 94       	cli
    //INICIALIZAMOS VARIABLES
    dataRx.buff = (uint8_t *)buffRx;
 852:	e8 e2       	ldi	r30, 0x28	; 40
 854:	f2 e0       	ldi	r31, 0x02	; 2
 856:	88 e2       	ldi	r24, 0x28	; 40
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	91 83       	std	Z+1, r25	; 0x01
 85c:	80 83       	st	Z, r24
    dataRx.indexR = 0;
 85e:	12 82       	std	Z+2, r1	; 0x02
    dataRx.indexW = 0;
 860:	13 82       	std	Z+3, r1	; 0x03
    dataRx.header = HEADER_U;
 862:	10 86       	std	Z+8, r1	; 0x08
    dataRx.mask = RXBUFSIZE - 1;
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	85 83       	std	Z+5, r24	; 0x05

    dataTx.buff = buffTx;
 868:	a3 e3       	ldi	r26, 0x33	; 51
 86a:	b2 e0       	ldi	r27, 0x02	; 2
 86c:	26 e4       	ldi	r18, 0x46	; 70
 86e:	32 e0       	ldi	r19, 0x02	; 2
 870:	11 96       	adiw	r26, 0x01	; 1
 872:	3c 93       	st	X, r19
 874:	2e 93       	st	-X, r18
    dataTx.indexR = 0;
 876:	12 96       	adiw	r26, 0x02	; 2
 878:	1c 92       	st	X, r1
 87a:	12 97       	sbiw	r26, 0x02	; 2
    dataTx.indexW = 0;
 87c:	13 96       	adiw	r26, 0x03	; 3
 87e:	1c 92       	st	X, r1
 880:	13 97       	sbiw	r26, 0x03	; 3
    dataTx.mask = TXBUFSIZE -1;
 882:	14 96       	adiw	r26, 0x04	; 4
 884:	8c 93       	st	X, r24
    RESETFLAGS = 0;
 886:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <flags>
	
	dataRx.isComannd = 0;
 88a:	12 86       	std	Z+10, r1	; 0x0a
	//is100ms = 0;
	////Inicializamos contadores
	//time10ms = 10;	
	//time100ms = 10;
	
	MillisCounter = 0;
 88c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <MillisCounter>
 890:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <MillisCounter+0x1>
 894:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <MillisCounter+0x2>
 898:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <MillisCounter+0x3>
	
	//Inicializamos los pines salida/entrada
	
	DDRB |= (1<<LEDBUILTIN); //Seteo del led como salida	
 89c:	84 b1       	in	r24, 0x04	; 4
 89e:	80 62       	ori	r24, 0x20	; 32
 8a0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<TRIG) | (0<<ECHO);//Definimos el trig como salida y el echo como entrada
 8a2:	84 b1       	in	r24, 0x04	; 4
 8a4:	82 60       	ori	r24, 0x02	; 2
 8a6:	84 b9       	out	0x04, r24	; 4
	
	//Seteamos el valor del led
	PORTB &= ~(1<<LEDBUILTIN); //ledOff
 8a8:	85 b1       	in	r24, 0x05	; 5
 8aa:	8f 7d       	andi	r24, 0xDF	; 223
 8ac:	85 b9       	out	0x05, r24	; 5
	//PORTB |= (1<<LEDBUILTIN); //ledOn
	PORTB &= ~(1<<TRIG);//Inicializamos con el trigger apagado
 8ae:	85 b1       	in	r24, 0x05	; 5
 8b0:	8d 7f       	andi	r24, 0xFD	; 253
 8b2:	85 b9       	out	0x05, r24	; 5
	
	
	//Inicializamos interrupciones
	initTimer0();
 8b4:	0e 94 66 03 	call	0x6cc	; 0x6cc <initTimer0>
	initTimer1();
 8b8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <initTimer1>
	initUSART0();
 8bc:	0e 94 57 03 	call	0x6ae	; 0x6ae <initUSART0>
	
	sei();
 8c0:	78 94       	sei


/* User code -----------------------------------------------------------------*/

	//Configuracion de temporizadores
	delayConfig(&generalTime,GENERALTIME);
 8c2:	6a e0       	ldi	r22, 0x0A	; 10
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	89 e3       	ldi	r24, 0x39	; 57
 8c8:	92 e0       	ldi	r25, 0x02	; 2
 8ca:	0e 94 67 02 	call	0x4ce	; 0x4ce <delayConfig>
	
    while(1){
		do10ms();
 8ce:	0e 94 45 02 	call	0x48a	; 0x48a <do10ms>
		do100ms();	
 8d2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <do100ms>
		//on100ms();
		triggerTask();
 8d6:	0e 94 3a 03 	call	0x674	; 0x674 <triggerTask>
		getDistance();
 8da:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <getDistance>
        //CONEXIONES SERIAL Y WIFI
        serialTask((_sRx *)&dataRx,&dataTx); //serialTask -> conexion serial
 8de:	63 e3       	ldi	r22, 0x33	; 51
 8e0:	72 e0       	ldi	r23, 0x02	; 2
 8e2:	88 e2       	ldi	r24, 0x28	; 40
 8e4:	92 e0       	ldi	r25, 0x02	; 2
 8e6:	0e 94 a7 02 	call	0x54e	; 0x54e <serialTask>
 8ea:	f1 cf       	rjmp	.-30     	; 0x8ce <main+0x7e>

000008ec <__tablejump2__>:
 8ec:	ee 0f       	add	r30, r30
 8ee:	ff 1f       	adc	r31, r31
 8f0:	05 90       	lpm	r0, Z+
 8f2:	f4 91       	lpm	r31, Z
 8f4:	e0 2d       	mov	r30, r0
 8f6:	09 94       	ijmp

000008f8 <_exit>:
 8f8:	f8 94       	cli

000008fa <__stop_program>:
 8fa:	ff cf       	rjmp	.-2      	; 0x8fa <__stop_program>
