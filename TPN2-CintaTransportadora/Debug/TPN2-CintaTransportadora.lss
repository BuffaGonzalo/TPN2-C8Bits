
TPN2-CintaTransportadora.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000a1c  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000236  00800110  00800110  00000ac0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001575  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093b  00000000  00000000  000021bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a35  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074c  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072c  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_3>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__vector_12>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	59 01       	movw	r10, r18
  6a:	6b 01       	movw	r12, r22
  6c:	83 01       	movw	r16, r6
  6e:	98 01       	movw	r18, r16
  70:	ad 01       	movw	r20, r26
  72:	bb 01       	movw	r22, r22
  74:	e0 01       	movw	r28, r0

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec e1       	ldi	r30, 0x1C	; 28
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 31       	cpi	r26, 0x10	; 16
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	23 e0       	ldi	r18, 0x03	; 3
  9a:	a0 e1       	ldi	r26, 0x10	; 16
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 34       	cpi	r26, 0x46	; 70
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a1 04 	call	0x942	; 0x942 <main>
  ac:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <initHcSr04>:
uint8_t ISDISTANCE = 0;

void initHcSr04()
{
	//inicialización de las banderas
	RESETFLAGS = 0;
  b4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <hcFlags>
  b8:	08 95       	ret

000000ba <triggerTask>:
	hcsr04(); //ejecución de la función
}

void triggerTask(uint8_t is100ms)
{
	if(is100ms && ~TRIGGERDONE)//ejecucion cada 100ms y que no haya ocurrido un trigger
  ba:	88 23       	and	r24, r24
  bc:	29 f0       	breq	.+10     	; 0xc8 <triggerTask+0xe>
		NEWMEASURE=1;
  be:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <hcFlags>
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <hcFlags>
  c8:	08 95       	ret

000000ca <hcSr04Task>:
	//inicialización de las banderas
	RESETFLAGS = 0;
}

void hcSr04Task(void (*hcsr04)(), uint8_t *flags) //
{
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	8c 01       	movw	r16, r24
  d4:	eb 01       	movw	r28, r22
	hcFlags.bytes = *flags; //tomamos los valores 			
  d6:	88 81       	ld	r24, Y
  d8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <hcFlags>

	//Sistema de control
	if(OKDISTANCE && TRIGGERDONE)
  dc:	80 7c       	andi	r24, 0xC0	; 192
  de:	80 3c       	cpi	r24, 0xC0	; 192
  e0:	49 f4       	brne	.+18     	; 0xf4 <hcSr04Task+0x2a>
	{
		OKDISTANCE = 0;
  e2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <hcFlags>
		TRIGGERDONE = 0;
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <hcFlags>
		ISDISTANCE=1; 
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	if (ECHOTIMEOUT)
  f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <hcFlags>
  f8:	83 ff       	sbrs	r24, 3
  fa:	04 c0       	rjmp	.+8      	; 0x104 <hcSr04Task+0x3a>
	{
		ECHOTIMEOUT=0;
		TRIGGERDONE=0;
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	8f 7b       	andi	r24, 0xBF	; 191
 100:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <hcFlags>
	}

	triggerTask(IS100MS);
 104:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <hcFlags>
 108:	81 70       	andi	r24, 0x01	; 1
 10a:	0e 94 5d 00 	call	0xba	; 0xba <triggerTask>

	*flags = hcFlags.bytes;	//guardamos los valores 
 10e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <hcFlags>
 112:	88 83       	st	Y, r24
	hcsr04(); //ejecución de la función
 114:	f8 01       	movw	r30, r16
 116:	09 95       	icall
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <getDistance>:
	if(is100ms && ~TRIGGERDONE)//ejecucion cada 100ms y que no haya ocurrido un trigger
		NEWMEASURE=1;
}

void getDistance(uint32_t *distance, uint32_t startTime, uint32_t endTime)
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	fc 01       	movw	r30, r24
	if(ISDISTANCE)
 128:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 12c:	99 23       	and	r25, r25
 12e:	71 f0       	breq	.+28     	; 0x14c <getDistance+0x2a>
	{
		////Utilizamos estas 2 banderas para poder setear en distintos momentos 
		ISDISTANCE = 0;
 130:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		*distance = (endTime - startTime)/2; //distancia [cm]
 134:	04 1b       	sub	r16, r20
 136:	15 0b       	sbc	r17, r21
 138:	26 0b       	sbc	r18, r22
 13a:	37 0b       	sbc	r19, r23
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	17 95       	ror	r17
 142:	07 95       	ror	r16
 144:	00 83       	st	Z, r16
 146:	11 83       	std	Z+1, r17	; 0x01
 148:	22 83       	std	Z+2, r18	; 0x02
 14a:	33 83       	std	Z+3, r19	; 0x03
	}	
}
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <putHeaderOnTx>:
	return timeReach;
}

void delayWrite(_delay_t *delay, uint16_t interval){
	delay->interval = interval;
	delay->isRunnig = 0;
 152:	fc 01       	movw	r30, r24
 154:	15 82       	std	Z+5, r1	; 0x05
 156:	a0 81       	ld	r26, Z
 158:	b1 81       	ldd	r27, Z+1	; 0x01
 15a:	83 81       	ldd	r24, Z+3	; 0x03
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	98 0f       	add	r25, r24
 160:	93 83       	std	Z+3, r25	; 0x03
 162:	a8 0f       	add	r26, r24
 164:	b1 1d       	adc	r27, r1
 166:	85 e5       	ldi	r24, 0x55	; 85
 168:	8c 93       	st	X, r24
 16a:	84 81       	ldd	r24, Z+4	; 0x04
 16c:	93 81       	ldd	r25, Z+3	; 0x03
 16e:	98 23       	and	r25, r24
 170:	a0 81       	ld	r26, Z
 172:	b1 81       	ldd	r27, Z+1	; 0x01
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	89 0f       	add	r24, r25
 178:	83 83       	std	Z+3, r24	; 0x03
 17a:	a9 0f       	add	r26, r25
 17c:	b1 1d       	adc	r27, r1
 17e:	8e e4       	ldi	r24, 0x4E	; 78
 180:	8c 93       	st	X, r24
 182:	84 81       	ldd	r24, Z+4	; 0x04
 184:	93 81       	ldd	r25, Z+3	; 0x03
 186:	98 23       	and	r25, r24
 188:	a0 81       	ld	r26, Z
 18a:	b1 81       	ldd	r27, Z+1	; 0x01
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	89 0f       	add	r24, r25
 190:	83 83       	std	Z+3, r24	; 0x03
 192:	a9 0f       	add	r26, r25
 194:	b1 1d       	adc	r27, r1
 196:	85 e4       	ldi	r24, 0x45	; 69
 198:	8c 93       	st	X, r24
 19a:	84 81       	ldd	r24, Z+4	; 0x04
 19c:	93 81       	ldd	r25, Z+3	; 0x03
 19e:	98 23       	and	r25, r24
 1a0:	a0 81       	ld	r26, Z
 1a2:	b1 81       	ldd	r27, Z+1	; 0x01
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	89 0f       	add	r24, r25
 1a8:	83 83       	std	Z+3, r24	; 0x03
 1aa:	a9 0f       	add	r26, r25
 1ac:	b1 1d       	adc	r27, r1
 1ae:	82 e5       	ldi	r24, 0x52	; 82
 1b0:	8c 93       	st	X, r24
 1b2:	84 81       	ldd	r24, Z+4	; 0x04
 1b4:	93 81       	ldd	r25, Z+3	; 0x03
 1b6:	98 23       	and	r25, r24
 1b8:	a0 81       	ld	r26, Z
 1ba:	b1 81       	ldd	r27, Z+1	; 0x01
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	89 0f       	add	r24, r25
 1c0:	83 83       	std	Z+3, r24	; 0x03
 1c2:	a9 0f       	add	r26, r25
 1c4:	b1 1d       	adc	r27, r1
 1c6:	4f 5f       	subi	r20, 0xFF	; 255
 1c8:	4c 93       	st	X, r20
 1ca:	84 81       	ldd	r24, Z+4	; 0x04
 1cc:	93 81       	ldd	r25, Z+3	; 0x03
 1ce:	98 23       	and	r25, r24
 1d0:	a0 81       	ld	r26, Z
 1d2:	b1 81       	ldd	r27, Z+1	; 0x01
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	89 0f       	add	r24, r25
 1d8:	83 83       	std	Z+3, r24	; 0x03
 1da:	a9 0f       	add	r26, r25
 1dc:	b1 1d       	adc	r27, r1
 1de:	8a e3       	ldi	r24, 0x3A	; 58
 1e0:	8c 93       	st	X, r24
 1e2:	84 81       	ldd	r24, Z+4	; 0x04
 1e4:	93 81       	ldd	r25, Z+3	; 0x03
 1e6:	98 23       	and	r25, r24
 1e8:	a0 81       	ld	r26, Z
 1ea:	b1 81       	ldd	r27, Z+1	; 0x01
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	89 0f       	add	r24, r25
 1f0:	83 83       	std	Z+3, r24	; 0x03
 1f2:	a9 0f       	add	r26, r25
 1f4:	b1 1d       	adc	r27, r1
 1f6:	6c 93       	st	X, r22
 1f8:	94 81       	ldd	r25, Z+4	; 0x04
 1fa:	83 81       	ldd	r24, Z+3	; 0x03
 1fc:	98 23       	and	r25, r24
 1fe:	93 83       	std	Z+3, r25	; 0x03
 200:	95 81       	ldd	r25, Z+5	; 0x05
 202:	49 27       	eor	r20, r25
 204:	64 27       	eor	r22, r20
 206:	86 e3       	ldi	r24, 0x36	; 54
 208:	86 27       	eor	r24, r22
 20a:	85 83       	std	Z+5, r24	; 0x05
 20c:	08 95       	ret

0000020e <putByteOnTx>:
 20e:	fc 01       	movw	r30, r24
 210:	a0 81       	ld	r26, Z
 212:	b1 81       	ldd	r27, Z+1	; 0x01
 214:	83 81       	ldd	r24, Z+3	; 0x03
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	98 0f       	add	r25, r24
 21a:	93 83       	std	Z+3, r25	; 0x03
 21c:	a8 0f       	add	r26, r24
 21e:	b1 1d       	adc	r27, r1
 220:	6c 93       	st	X, r22
 222:	94 81       	ldd	r25, Z+4	; 0x04
 224:	83 81       	ldd	r24, Z+3	; 0x03
 226:	98 23       	and	r25, r24
 228:	93 83       	std	Z+3, r25	; 0x03
 22a:	85 81       	ldd	r24, Z+5	; 0x05
 22c:	86 27       	eor	r24, r22
 22e:	85 83       	std	Z+5, r24	; 0x05
 230:	08 95       	ret

00000232 <putStrOntx>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	fc 01       	movw	r30, r24
 238:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <globalIndex>
 23c:	1b c0       	rjmp	.+54     	; 0x274 <putStrOntx+0x42>
 23e:	a0 81       	ld	r26, Z
 240:	b1 81       	ldd	r27, Z+1	; 0x01
 242:	83 81       	ldd	r24, Z+3	; 0x03
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	98 0f       	add	r25, r24
 248:	93 83       	std	Z+3, r25	; 0x03
 24a:	a8 0f       	add	r26, r24
 24c:	b1 1d       	adc	r27, r1
 24e:	88 81       	ld	r24, Y
 250:	8c 93       	st	X, r24
 252:	84 81       	ldd	r24, Z+4	; 0x04
 254:	93 81       	ldd	r25, Z+3	; 0x03
 256:	89 23       	and	r24, r25
 258:	83 83       	std	Z+3, r24	; 0x03
 25a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <globalIndex>
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	98 0f       	add	r25, r24
 262:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <globalIndex>
 266:	db 01       	movw	r26, r22
 268:	a8 0f       	add	r26, r24
 26a:	b1 1d       	adc	r27, r1
 26c:	8c 91       	ld	r24, X
 26e:	95 81       	ldd	r25, Z+5	; 0x05
 270:	89 27       	eor	r24, r25
 272:	85 83       	std	Z+5, r24	; 0x05
 274:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <globalIndex>
 278:	eb 01       	movw	r28, r22
 27a:	c8 0f       	add	r28, r24
 27c:	d1 1d       	adc	r29, r1
 27e:	88 81       	ld	r24, Y
 280:	81 11       	cpse	r24, r1
 282:	dd cf       	rjmp	.-70     	; 0x23e <putStrOntx+0xc>
 284:	85 81       	ldd	r24, Z+5	; 0x05
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <decodeHeader>:
 28c:	dc 01       	movw	r26, r24
 28e:	13 96       	adiw	r26, 0x03	; 3
 290:	2c 91       	ld	r18, X
 292:	13 97       	sbiw	r26, 0x03	; 3
 294:	cd c0       	rjmp	.+410    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 296:	18 96       	adiw	r26, 0x08	; 8
 298:	ec 91       	ld	r30, X
 29a:	18 97       	sbiw	r26, 0x08	; 8
 29c:	4e 2f       	mov	r20, r30
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	47 30       	cpi	r20, 0x07	; 7
 2a2:	51 05       	cpc	r21, r1
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <decodeHeader+0x1c>
 2a6:	b6 c0       	rjmp	.+364    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 2a8:	fa 01       	movw	r30, r20
 2aa:	ec 5c       	subi	r30, 0xCC	; 204
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__tablejump2__>
 2b2:	ed 91       	ld	r30, X+
 2b4:	fc 91       	ld	r31, X
 2b6:	11 97       	sbiw	r26, 0x01	; 1
 2b8:	e8 0f       	add	r30, r24
 2ba:	f1 1d       	adc	r31, r1
 2bc:	80 81       	ld	r24, Z
 2be:	85 35       	cpi	r24, 0x55	; 85
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <decodeHeader+0x38>
 2c2:	ab c0       	rjmp	.+342    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	18 96       	adiw	r26, 0x08	; 8
 2c8:	8c 93       	st	X, r24
 2ca:	18 97       	sbiw	r26, 0x08	; 8
 2cc:	85 e0       	ldi	r24, 0x05	; 5
 2ce:	19 96       	adiw	r26, 0x09	; 9
 2d0:	8c 93       	st	X, r24
 2d2:	19 97       	sbiw	r26, 0x09	; 9
 2d4:	a2 c0       	rjmp	.+324    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	11 97       	sbiw	r26, 0x01	; 1
 2dc:	e8 0f       	add	r30, r24
 2de:	f1 1d       	adc	r31, r1
 2e0:	90 81       	ld	r25, Z
 2e2:	9e 34       	cpi	r25, 0x4E	; 78
 2e4:	29 f4       	brne	.+10     	; 0x2f0 <decodeHeader+0x64>
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	18 96       	adiw	r26, 0x08	; 8
 2ea:	8c 93       	st	X, r24
 2ec:	18 97       	sbiw	r26, 0x08	; 8
 2ee:	95 c0       	rjmp	.+298    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 2f0:	95 35       	cpi	r25, 0x55	; 85
 2f2:	09 f4       	brne	.+2      	; 0x2f6 <decodeHeader+0x6a>
 2f4:	92 c0       	rjmp	.+292    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 2f6:	18 96       	adiw	r26, 0x08	; 8
 2f8:	1c 92       	st	X, r1
 2fa:	18 97       	sbiw	r26, 0x08	; 8
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	12 96       	adiw	r26, 0x02	; 2
 300:	8c 93       	st	X, r24
 302:	12 97       	sbiw	r26, 0x02	; 2
 304:	8a c0       	rjmp	.+276    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 306:	ed 91       	ld	r30, X+
 308:	fc 91       	ld	r31, X
 30a:	11 97       	sbiw	r26, 0x01	; 1
 30c:	e8 0f       	add	r30, r24
 30e:	f1 1d       	adc	r31, r1
 310:	90 81       	ld	r25, Z
 312:	95 34       	cpi	r25, 0x45	; 69
 314:	29 f4       	brne	.+10     	; 0x320 <decodeHeader+0x94>
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	18 96       	adiw	r26, 0x08	; 8
 31a:	8c 93       	st	X, r24
 31c:	18 97       	sbiw	r26, 0x08	; 8
 31e:	7d c0       	rjmp	.+250    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 320:	18 96       	adiw	r26, 0x08	; 8
 322:	1c 92       	st	X, r1
 324:	18 97       	sbiw	r26, 0x08	; 8
 326:	81 50       	subi	r24, 0x01	; 1
 328:	12 96       	adiw	r26, 0x02	; 2
 32a:	8c 93       	st	X, r24
 32c:	12 97       	sbiw	r26, 0x02	; 2
 32e:	75 c0       	rjmp	.+234    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 330:	ed 91       	ld	r30, X+
 332:	fc 91       	ld	r31, X
 334:	11 97       	sbiw	r26, 0x01	; 1
 336:	e8 0f       	add	r30, r24
 338:	f1 1d       	adc	r31, r1
 33a:	90 81       	ld	r25, Z
 33c:	92 35       	cpi	r25, 0x52	; 82
 33e:	29 f4       	brne	.+10     	; 0x34a <decodeHeader+0xbe>
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	18 96       	adiw	r26, 0x08	; 8
 344:	8c 93       	st	X, r24
 346:	18 97       	sbiw	r26, 0x08	; 8
 348:	68 c0       	rjmp	.+208    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 34a:	18 96       	adiw	r26, 0x08	; 8
 34c:	1c 92       	st	X, r1
 34e:	18 97       	sbiw	r26, 0x08	; 8
 350:	81 50       	subi	r24, 0x01	; 1
 352:	12 96       	adiw	r26, 0x02	; 2
 354:	8c 93       	st	X, r24
 356:	12 97       	sbiw	r26, 0x02	; 2
 358:	60 c0       	rjmp	.+192    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 35a:	ed 91       	ld	r30, X+
 35c:	fc 91       	ld	r31, X
 35e:	11 97       	sbiw	r26, 0x01	; 1
 360:	e8 0f       	add	r30, r24
 362:	f1 1d       	adc	r31, r1
 364:	80 81       	ld	r24, Z
 366:	17 96       	adiw	r26, 0x07	; 7
 368:	8c 93       	st	X, r24
 36a:	17 97       	sbiw	r26, 0x07	; 7
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	18 96       	adiw	r26, 0x08	; 8
 370:	8c 93       	st	X, r24
 372:	18 97       	sbiw	r26, 0x08	; 8
 374:	52 c0       	rjmp	.+164    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 376:	ed 91       	ld	r30, X+
 378:	fc 91       	ld	r31, X
 37a:	11 97       	sbiw	r26, 0x01	; 1
 37c:	e8 0f       	add	r30, r24
 37e:	f1 1d       	adc	r31, r1
 380:	90 81       	ld	r25, Z
 382:	9a 33       	cpi	r25, 0x3A	; 58
 384:	a9 f4       	brne	.+42     	; 0x3b0 <decodeHeader+0x124>
 386:	96 e0       	ldi	r25, 0x06	; 6
 388:	18 96       	adiw	r26, 0x08	; 8
 38a:	9c 93       	st	X, r25
 38c:	18 97       	sbiw	r26, 0x08	; 8
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	15 96       	adiw	r26, 0x05	; 5
 392:	9c 91       	ld	r25, X
 394:	15 97       	sbiw	r26, 0x05	; 5
 396:	89 23       	and	r24, r25
 398:	14 96       	adiw	r26, 0x04	; 4
 39a:	8c 93       	st	X, r24
 39c:	14 97       	sbiw	r26, 0x04	; 4
 39e:	17 96       	adiw	r26, 0x07	; 7
 3a0:	9c 91       	ld	r25, X
 3a2:	17 97       	sbiw	r26, 0x07	; 7
 3a4:	86 e3       	ldi	r24, 0x36	; 54
 3a6:	89 27       	eor	r24, r25
 3a8:	16 96       	adiw	r26, 0x06	; 6
 3aa:	8c 93       	st	X, r24
 3ac:	16 97       	sbiw	r26, 0x06	; 6
 3ae:	35 c0       	rjmp	.+106    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3b0:	18 96       	adiw	r26, 0x08	; 8
 3b2:	1c 92       	st	X, r1
 3b4:	18 97       	sbiw	r26, 0x08	; 8
 3b6:	81 50       	subi	r24, 0x01	; 1
 3b8:	12 96       	adiw	r26, 0x02	; 2
 3ba:	8c 93       	st	X, r24
 3bc:	12 97       	sbiw	r26, 0x02	; 2
 3be:	2d c0       	rjmp	.+90     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3c0:	17 96       	adiw	r26, 0x07	; 7
 3c2:	9c 91       	ld	r25, X
 3c4:	17 97       	sbiw	r26, 0x07	; 7
 3c6:	91 50       	subi	r25, 0x01	; 1
 3c8:	17 96       	adiw	r26, 0x07	; 7
 3ca:	9c 93       	st	X, r25
 3cc:	17 97       	sbiw	r26, 0x07	; 7
 3ce:	99 23       	and	r25, r25
 3d0:	71 f0       	breq	.+28     	; 0x3ee <decodeHeader+0x162>
 3d2:	ed 91       	ld	r30, X+
 3d4:	fc 91       	ld	r31, X
 3d6:	11 97       	sbiw	r26, 0x01	; 1
 3d8:	e8 0f       	add	r30, r24
 3da:	f1 1d       	adc	r31, r1
 3dc:	80 81       	ld	r24, Z
 3de:	16 96       	adiw	r26, 0x06	; 6
 3e0:	9c 91       	ld	r25, X
 3e2:	16 97       	sbiw	r26, 0x06	; 6
 3e4:	89 27       	eor	r24, r25
 3e6:	16 96       	adiw	r26, 0x06	; 6
 3e8:	8c 93       	st	X, r24
 3ea:	16 97       	sbiw	r26, 0x06	; 6
 3ec:	16 c0       	rjmp	.+44     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3ee:	18 96       	adiw	r26, 0x08	; 8
 3f0:	1c 92       	st	X, r1
 3f2:	18 97       	sbiw	r26, 0x08	; 8
 3f4:	ed 91       	ld	r30, X+
 3f6:	fc 91       	ld	r31, X
 3f8:	11 97       	sbiw	r26, 0x01	; 1
 3fa:	e8 0f       	add	r30, r24
 3fc:	f1 1d       	adc	r31, r1
 3fe:	90 81       	ld	r25, Z
 400:	16 96       	adiw	r26, 0x06	; 6
 402:	8c 91       	ld	r24, X
 404:	16 97       	sbiw	r26, 0x06	; 6
 406:	98 13       	cpse	r25, r24
 408:	08 c0       	rjmp	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	1a 96       	adiw	r26, 0x0a	; 10
 40e:	8c 93       	st	X, r24
 410:	1a 97       	sbiw	r26, 0x0a	; 10
 412:	03 c0       	rjmp	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 414:	18 96       	adiw	r26, 0x08	; 8
 416:	1c 92       	st	X, r1
 418:	18 97       	sbiw	r26, 0x08	; 8
 41a:	12 96       	adiw	r26, 0x02	; 2
 41c:	8c 91       	ld	r24, X
 41e:	12 97       	sbiw	r26, 0x02	; 2
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	15 96       	adiw	r26, 0x05	; 5
 424:	9c 91       	ld	r25, X
 426:	15 97       	sbiw	r26, 0x05	; 5
 428:	89 23       	and	r24, r25
 42a:	12 96       	adiw	r26, 0x02	; 2
 42c:	8c 93       	st	X, r24
 42e:	12 97       	sbiw	r26, 0x02	; 2
 430:	12 96       	adiw	r26, 0x02	; 2
 432:	8c 91       	ld	r24, X
 434:	12 97       	sbiw	r26, 0x02	; 2
 436:	28 13       	cpse	r18, r24
 438:	2e cf       	rjmp	.-420    	; 0x296 <decodeHeader+0xa>
 43a:	08 95       	ret

0000043c <decodeCommand>:
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	eb 01       	movw	r28, r22
 446:	dc 01       	movw	r26, r24
 448:	ed 91       	ld	r30, X+
 44a:	fc 91       	ld	r31, X
 44c:	11 97       	sbiw	r26, 0x01	; 1
 44e:	14 96       	adiw	r26, 0x04	; 4
 450:	8c 91       	ld	r24, X
 452:	e8 0f       	add	r30, r24
 454:	f1 1d       	adc	r31, r1
 456:	60 81       	ld	r22, Z
 458:	60 3f       	cpi	r22, 0xF0	; 240
 45a:	31 f0       	breq	.+12     	; 0x468 <decodeCommand+0x2c>
 45c:	61 3f       	cpi	r22, 0xF1	; 241
 45e:	91 f0       	breq	.+36     	; 0x484 <decodeCommand+0x48>
 460:	63 3a       	cpi	r22, 0xA3	; 163
 462:	09 f0       	breq	.+2      	; 0x466 <decodeCommand+0x2a>
 464:	50 c0       	rjmp	.+160    	; 0x506 <decodeCommand+0xca>
 466:	1d c0       	rjmp	.+58     	; 0x4a2 <decodeCommand+0x66>
 468:	42 e0       	ldi	r20, 0x02	; 2
 46a:	60 ef       	ldi	r22, 0xF0	; 240
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 a9 00 	call	0x152	; 0x152 <putHeaderOnTx>
 472:	6d e0       	ldi	r22, 0x0D	; 13
 474:	ce 01       	movw	r24, r28
 476:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 47a:	6d 81       	ldd	r22, Y+5	; 0x05
 47c:	ce 01       	movw	r24, r28
 47e:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 482:	4d c0       	rjmp	.+154    	; 0x51e <decodeCommand+0xe2>
 484:	4c e0       	ldi	r20, 0x0C	; 12
 486:	61 ef       	ldi	r22, 0xF1	; 241
 488:	ce 01       	movw	r24, r28
 48a:	0e 94 a9 00 	call	0x152	; 0x152 <putHeaderOnTx>
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	71 e0       	ldi	r23, 0x01	; 1
 492:	ce 01       	movw	r24, r28
 494:	0e 94 19 01 	call	0x232	; 0x232 <putStrOntx>
 498:	6d 81       	ldd	r22, Y+5	; 0x05
 49a:	ce 01       	movw	r24, r28
 49c:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 4a0:	3e c0       	rjmp	.+124    	; 0x51e <decodeCommand+0xe2>
 4a2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <distance>
 4a6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <distance+0x1>
 4aa:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <distance+0x2>
 4ae:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <distance+0x3>
 4b2:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <myWord>
 4b6:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <myWord+0x1>
 4ba:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <myWord+0x2>
 4be:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <myWord+0x3>
 4c2:	45 e0       	ldi	r20, 0x05	; 5
 4c4:	63 ea       	ldi	r22, 0xA3	; 163
 4c6:	ce 01       	movw	r24, r28
 4c8:	0e 94 a9 00 	call	0x152	; 0x152 <putHeaderOnTx>
 4cc:	00 e4       	ldi	r16, 0x40	; 64
 4ce:	12 e0       	ldi	r17, 0x02	; 2
 4d0:	f8 01       	movw	r30, r16
 4d2:	60 81       	ld	r22, Z
 4d4:	ce 01       	movw	r24, r28
 4d6:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 4da:	d8 01       	movw	r26, r16
 4dc:	11 96       	adiw	r26, 0x01	; 1
 4de:	6c 91       	ld	r22, X
 4e0:	ce 01       	movw	r24, r28
 4e2:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 4e6:	f8 01       	movw	r30, r16
 4e8:	62 81       	ldd	r22, Z+2	; 0x02
 4ea:	ce 01       	movw	r24, r28
 4ec:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 4f0:	d8 01       	movw	r26, r16
 4f2:	13 96       	adiw	r26, 0x03	; 3
 4f4:	6c 91       	ld	r22, X
 4f6:	ce 01       	movw	r24, r28
 4f8:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 4fc:	6d 81       	ldd	r22, Y+5	; 0x05
 4fe:	ce 01       	movw	r24, r28
 500:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 504:	0c c0       	rjmp	.+24     	; 0x51e <decodeCommand+0xe2>
 506:	42 e0       	ldi	r20, 0x02	; 2
 508:	ce 01       	movw	r24, r28
 50a:	0e 94 a9 00 	call	0x152	; 0x152 <putHeaderOnTx>
 50e:	6f ef       	ldi	r22, 0xFF	; 255
 510:	ce 01       	movw	r24, r28
 512:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 516:	6d 81       	ldd	r22, Y+5	; 0x05
 518:	ce 01       	movw	r24, r28
 51a:	0e 94 07 01 	call	0x20e	; 0x20e <putByteOnTx>
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	08 95       	ret

00000528 <delayConfig>:
 528:	fc 01       	movw	r30, r24
 52a:	75 83       	std	Z+5, r23	; 0x05
 52c:	64 83       	std	Z+4, r22	; 0x04
 52e:	16 82       	std	Z+6, r1	; 0x06
 530:	08 95       	ret

00000532 <millis>:
}

uint32_t millis()
{
	uint32_t savedMillis;
	sei();
 532:	78 94       	sei
		savedMillis = MillisCounter;	
 534:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <MillisCounter>
 538:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <MillisCounter+0x1>
 53c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <MillisCounter+0x2>
 540:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <MillisCounter+0x3>
	cli();
 544:	f8 94       	cli
	return savedMillis;
}
 546:	08 95       	ret

00000548 <delayRead>:
void delayConfig(_delay_t *delay, uint16_t  interval){
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	ec 01       	movw	r28, r24
	uint8_t timeReach=0;
	if(!delay->isRunnig){
 552:	8e 81       	ldd	r24, Y+6	; 0x06
 554:	81 11       	cpse	r24, r1
 556:	0a c0       	rjmp	.+20     	; 0x56c <delayRead+0x24>
		delay->isRunnig = 1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	8e 83       	std	Y+6, r24	; 0x06
		delay->startTime = millis();
 55c:	0e 94 99 02 	call	0x532	; 0x532 <millis>
 560:	68 83       	st	Y, r22
 562:	79 83       	std	Y+1, r23	; 0x01
 564:	8a 83       	std	Y+2, r24	; 0x02
 566:	9b 83       	std	Y+3, r25	; 0x03
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
	uint8_t timeReach=0;
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	19 c0       	rjmp	.+50     	; 0x59e <delayRead+0x56>
	if(!delay->isRunnig){
		delay->isRunnig = 1;
		delay->startTime = millis();
		}else{
		if((millis()-delay->startTime)>=delay->interval){
 56c:	0e 94 99 02 	call	0x532	; 0x532 <millis>
 570:	08 81       	ld	r16, Y
 572:	19 81       	ldd	r17, Y+1	; 0x01
 574:	2a 81       	ldd	r18, Y+2	; 0x02
 576:	3b 81       	ldd	r19, Y+3	; 0x03
 578:	ab 01       	movw	r20, r22
 57a:	bc 01       	movw	r22, r24
 57c:	40 1b       	sub	r20, r16
 57e:	51 0b       	sbc	r21, r17
 580:	62 0b       	sbc	r22, r18
 582:	73 0b       	sbc	r23, r19
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	9d 81       	ldd	r25, Y+5	; 0x05
 588:	a0 e0       	ldi	r26, 0x00	; 0
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	48 17       	cp	r20, r24
 58e:	59 07       	cpc	r21, r25
 590:	6a 07       	cpc	r22, r26
 592:	7b 07       	cpc	r23, r27
 594:	18 f0       	brcs	.+6      	; 0x59c <delayRead+0x54>
			timeReach = 1;
			delay->isRunnig = 0;
 596:	1e 82       	std	Y+6, r1	; 0x06
	if(!delay->isRunnig){
		delay->isRunnig = 1;
		delay->startTime = millis();
		}else{
		if((millis()-delay->startTime)>=delay->interval){
			timeReach = 1;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	01 c0       	rjmp	.+2      	; 0x59e <delayRead+0x56>
	delay->interval =interval;
	delay->isRunnig = 0;
}

uint8_t delayRead(_delay_t *delay){
	uint8_t timeReach=0;
 59c:	80 e0       	ldi	r24, 0x00	; 0
			timeReach = 1;
			delay->isRunnig = 0;
		}
	}
	return timeReach;
}
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	08 95       	ret

000005a8 <serialTask>:

/* Function prototypes user code ----------------------------------------------*/

//CONEXION SERIAL - WIFI
void serialTask(_sRx *dataRx, _sTx *dataTx)
{
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	ec 01       	movw	r28, r24
 5b2:	8b 01       	movw	r16, r22
	
    if(dataRx->isComannd){
 5b4:	8a 85       	ldd	r24, Y+10	; 0x0a
 5b6:	88 23       	and	r24, r24
 5b8:	21 f0       	breq	.+8      	; 0x5c2 <serialTask+0x1a>
        dataRx->isComannd=0; //false reemplazado por 0
 5ba:	1a 86       	std	Y+10, r1	; 0x0a
		
        decodeCommand(dataRx,dataTx);
 5bc:	ce 01       	movw	r24, r28
 5be:	0e 94 1e 02 	call	0x43c	; 0x43c <decodeCommand>
    }

	//Revisamos si llego un nuevo dato en el serie
	if(delayRead(&generalTime)){
 5c2:	87 e3       	ldi	r24, 0x37	; 55
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	0e 94 a4 02 	call	0x548	; 0x548 <delayRead>
 5ca:	88 23       	and	r24, r24
 5cc:	49 f0       	breq	.+18     	; 0x5e0 <serialTask+0x38>
		if(dataRx->header){
 5ce:	88 85       	ldd	r24, Y+8	; 0x08
 5d0:	88 23       	and	r24, r24
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <serialTask+0x38>
			dataRx->timeOut--;
 5d4:	89 85       	ldd	r24, Y+9	; 0x09
 5d6:	81 50       	subi	r24, 0x01	; 1
 5d8:	89 87       	std	Y+9, r24	; 0x09
			if(!dataRx->timeOut)
 5da:	81 11       	cpse	r24, r1
 5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <serialTask+0x38>
			dataRx->header = HEADER_U;
 5de:	18 86       	std	Y+8, r1	; 0x08
		}
	}
	
    if(dataRx->indexR!=dataRx->indexW){
 5e0:	9a 81       	ldd	r25, Y+2	; 0x02
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	98 17       	cp	r25, r24
 5e6:	19 f0       	breq	.+6      	; 0x5ee <serialTask+0x46>
		
        decodeHeader(dataRx);
 5e8:	ce 01       	movw	r24, r28
 5ea:	0e 94 46 01 	call	0x28c	; 0x28c <decodeHeader>
    } 	

    if(dataTx->indexR!=dataTx->indexW)
 5ee:	d8 01       	movw	r26, r16
 5f0:	12 96       	adiw	r26, 0x02	; 2
 5f2:	8c 91       	ld	r24, X
 5f4:	12 97       	sbiw	r26, 0x02	; 2
 5f6:	13 96       	adiw	r26, 0x03	; 3
 5f8:	9c 91       	ld	r25, X
 5fa:	13 97       	sbiw	r26, 0x03	; 3
 5fc:	89 17       	cp	r24, r25
 5fe:	d1 f0       	breq	.+52     	; 0x634 <serialTask+0x8c>
	{
		if(UCSR0A & (1 << UDRE0))
 600:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 604:	95 ff       	sbrs	r25, 5
 606:	16 c0       	rjmp	.+44     	; 0x634 <serialTask+0x8c>
		{
			UDR0=dataTx->buff[dataTx->indexR++];
 608:	ed 91       	ld	r30, X+
 60a:	fc 91       	ld	r31, X
 60c:	11 97       	sbiw	r26, 0x01	; 1
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	98 0f       	add	r25, r24
 612:	12 96       	adiw	r26, 0x02	; 2
 614:	9c 93       	st	X, r25
 616:	12 97       	sbiw	r26, 0x02	; 2
 618:	e8 0f       	add	r30, r24
 61a:	f1 1d       	adc	r31, r1
 61c:	80 81       	ld	r24, Z
 61e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			dataTx->indexR &=dataTx->mask;
 622:	14 96       	adiw	r26, 0x04	; 4
 624:	8c 91       	ld	r24, X
 626:	14 97       	sbiw	r26, 0x04	; 4
 628:	12 96       	adiw	r26, 0x02	; 2
 62a:	9c 91       	ld	r25, X
 62c:	12 97       	sbiw	r26, 0x02	; 2
 62e:	89 23       	and	r24, r25
 630:	12 96       	adiw	r26, 0x02	; 2
 632:	8c 93       	st	X, r24
		}
    }

}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	08 95       	ret

0000063e <hcsr04Control>:
		IS10MS = 0;//limpiamos la bandera de 10ms
		IS100MS = 0;//limpiamos la bandera de 100ms
	}
}

void hcsr04Control(){	
 63e:	cf 92       	push	r12
 640:	df 92       	push	r13
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15

	if(NEWMEASURE)
 646:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 64a:	84 ff       	sbrs	r24, 4
 64c:	07 c0       	rjmp	.+14     	; 0x65c <hcsr04Control+0x1e>
	{
		NEWMEASURE=0;
 64e:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 652:	8f 7e       	andi	r24, 0xEF	; 239
 654:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
		hcSr04Modes=ONTRIGGER;
 658:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <hcSr04Modes>
	}
	switch(hcSr04Modes){
 65c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <hcSr04Modes>
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	01 f1       	breq	.+64     	; 0x6a4 <hcsr04Control+0x66>
 664:	28 f0       	brcs	.+10     	; 0x670 <hcsr04Control+0x32>
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	49 f1       	breq	.+82     	; 0x6bc <hcsr04Control+0x7e>
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	81 f1       	breq	.+96     	; 0x6ce <hcsr04Control+0x90>
 66e:	3c c0       	rjmp	.+120    	; 0x6e8 <hcsr04Control+0xaa>
		case ONTRIGGER://ejecucion cada 100ms y que no haya ocurrido un trigger
			PORTB |= (1<<TRIG); //Comenzamos el pulso
 670:	85 b1       	in	r24, 0x05	; 5
 672:	82 60       	ori	r24, 0x02	; 2
 674:	85 b9       	out	0x05, r24	; 5
			OCR1B = TCNT1 + 20; //Espera de 10us en alto
 676:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 67a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 67e:	44 96       	adiw	r24, 0x14	; 20
 680:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 684:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			echoTimeout=millis();
 688:	0e 94 99 02 	call	0x532	; 0x532 <millis>
 68c:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <echoTimeout>
 690:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <echoTimeout+0x1>
 694:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <echoTimeout+0x2>
 698:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <echoTimeout+0x3>
			hcSr04Modes=IDLE;
 69c:	84 e0       	ldi	r24, 0x04	; 4
 69e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
			break;	
 6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <hcsr04Control+0xaa>
		case OFFTRIGGER:
			TRIGGERDONE = 1; //Control de que no salte de nuevo el trigger
 6a4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 6a8:	80 64       	ori	r24, 0x40	; 64
 6aa:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
			PORTB &= ~(1<<TRIG); //Finalizamos el pulso		
 6ae:	85 b1       	in	r24, 0x05	; 5
 6b0:	8d 7f       	andi	r24, 0xFD	; 253
 6b2:	85 b9       	out	0x05, r24	; 5
			hcSr04Modes=IDLE;
 6b4:	84 e0       	ldi	r24, 0x04	; 4
 6b6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
			break;
 6ba:	16 c0       	rjmp	.+44     	; 0x6e8 <hcsr04Control+0xaa>
		case UPFLANK:
			TCCR1B &= ~(1 << ICES1);  // Configurar a 0 valor de ICES1 para flanco descendente
 6bc:	e1 e8       	ldi	r30, 0x81	; 129
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	8f 7b       	andi	r24, 0xBF	; 191
 6c4:	80 83       	st	Z, r24
			hcSr04Modes=IDLE;
 6c6:	84 e0       	ldi	r24, 0x04	; 4
 6c8:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
			break;
 6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <hcsr04Control+0xaa>
		case DOWNFLANK:
			OKDISTANCE = 1;
 6ce:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 6d2:	80 68       	ori	r24, 0x80	; 128
 6d4:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
			TCCR1B |= (1 << ICES1);   // Resetear para proximo flanco ascendente
 6d8:	e1 e8       	ldi	r30, 0x81	; 129
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	80 64       	ori	r24, 0x40	; 64
 6e0:	80 83       	st	Z, r24
			hcSr04Modes=IDLE;
 6e2:	84 e0       	ldi	r24, 0x04	; 4
 6e4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
			break;
		case IDLE:
			break;
	}	
	
	if((echoTimeout-millis())>100)
 6e8:	c0 90 11 01 	lds	r12, 0x0111	; 0x800111 <echoTimeout>
 6ec:	d0 90 12 01 	lds	r13, 0x0112	; 0x800112 <echoTimeout+0x1>
 6f0:	e0 90 13 01 	lds	r14, 0x0113	; 0x800113 <echoTimeout+0x2>
 6f4:	f0 90 14 01 	lds	r15, 0x0114	; 0x800114 <echoTimeout+0x3>
 6f8:	0e 94 99 02 	call	0x532	; 0x532 <millis>
 6fc:	c6 1a       	sub	r12, r22
 6fe:	d7 0a       	sbc	r13, r23
 700:	e8 0a       	sbc	r14, r24
 702:	f9 0a       	sbc	r15, r25
 704:	85 e6       	ldi	r24, 0x65	; 101
 706:	c8 16       	cp	r12, r24
 708:	d1 04       	cpc	r13, r1
 70a:	e1 04       	cpc	r14, r1
 70c:	f1 04       	cpc	r15, r1
 70e:	28 f0       	brcs	.+10     	; 0x71a <hcsr04Control+0xdc>
	{
		ECHOTIMEOUT=1;
 710:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 714:	88 60       	ori	r24, 0x08	; 8
 716:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
		return;
	}
}
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	08 95       	ret

00000724 <initUSART0>:
	return savedMillis;
}

void initUSART0()//USART -> 115200 bd
{
	UCSR0A = 0xFE;
 724:	8e ef       	ldi	r24, 0xFE	; 254
 726:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 72a:	88 e9       	ldi	r24, 0x98	; 152
 72c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0x06;
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = 16;
 736:	80 e1       	ldi	r24, 0x10	; 16
 738:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = 0;
 73c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 740:	08 95       	ret

00000742 <initTimer0>:
}

void initTimer0()
{
	//Timer -> modo CTC - fclk/64 - CR0A: 249 -> 1ms
	TCCR0A = 0x02;
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; //Seteo del prescaler
 746:	93 e0       	ldi	r25, 0x03	; 3
 748:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 0x00;
 74a:	16 bc       	out	0x26, r1	; 38
	TIFR0 = 0x07;
 74c:	97 e0       	ldi	r25, 0x07	; 7
 74e:	95 bb       	out	0x15, r25	; 21
	OCR0A = 249; //Comienza en 0 
 750:	99 ef       	ldi	r25, 0xF9	; 249
 752:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;
 754:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 758:	08 95       	ret

0000075a <initTimer1>:
}

void initTimer1()
{
	//Configuraci?n para funcionamiento normal - fclk/8 -> 2Mhz - 0,5uS
	TCNT1 = 0;
 75a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 75e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0;
 762:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=(1<<ICNC1) | (1<<ICES1) | (0<<CS12) | (1<<CS11) | (0<<CS10); //Activamos la cancelacion de ruido y el preescaler a 8
 766:	82 ec       	ldi	r24, 0xC2	; 194
 768:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1B) | (1 << ICIE1); //Habilitamos la interrupci?n por captura de entrada ICIE1
 76c:	84 e2       	ldi	r24, 0x24	; 36
 76e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TIFR1 = TIFR1; //Hacemos 0 las banderas
 772:	86 b3       	in	r24, 0x16	; 22
 774:	86 bb       	out	0x16, r24	; 22
 776:	08 95       	ret

00000778 <initPCINT0>:
}

void initPCINT0()
{
	DDRB &= ~((1<<PORTB2));
 778:	84 b1       	in	r24, 0x04	; 4
 77a:	8b 7f       	andi	r24, 0xFB	; 251
 77c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB2);
 77e:	85 b1       	in	r24, 0x05	; 5
 780:	84 60       	ori	r24, 0x04	; 4
 782:	85 b9       	out	0x05, r24	; 5
	PCIFR |= (1<<PCIF0);
 784:	8b b3       	in	r24, 0x1b	; 27
 786:	81 60       	ori	r24, 0x01	; 1
 788:	8b bb       	out	0x1b, r24	; 27
	PCICR |= (1 << PCIE0); // Habilita interrupciones del grupo PCINT0 (PB0 - PB7)
 78a:	e8 e6       	ldi	r30, 0x68	; 104
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	81 60       	ori	r24, 0x01	; 1
 792:	80 83       	st	Z, r24
	PCMSK0 |= (1<< PCINT2); //Habilita la interrupción para el pin PB2
 794:	eb e6       	ldi	r30, 0x6B	; 107
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	84 60       	ori	r24, 0x04	; 4
 79c:	80 83       	st	Z, r24
 79e:	08 95       	ret

000007a0 <do10ms>:
}

void do10ms()
{
	if (time10ms == 0)
 7a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time10ms>
 7a4:	81 11       	cpse	r24, r1
 7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <do10ms+0x18>
	{
		IS10MS = 1;
 7a8:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
		time10ms = 10;
 7b2:	8a e0       	ldi	r24, 0x0A	; 10
 7b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time10ms>
 7b8:	08 95       	ret

000007ba <do100ms>:
	}
}

void do100ms()
{
	if(time100ms == 0)//reiniciamos el valor
 7ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7be:	81 11       	cpse	r24, r1
 7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <do100ms+0x18>
	{
		IS100MS = 1; //Activamos la bandera del pasode 100ms
 7c2:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 7c6:	81 60       	ori	r24, 0x01	; 1
 7c8:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
		time100ms = 10;
 7cc:	8a e0       	ldi	r24, 0x0A	; 10
 7ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(IS10MS==1)
 7d2:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 7d6:	81 ff       	sbrs	r24, 1
 7d8:	0f c0       	rjmp	.+30     	; 0x7f8 <do100ms+0x3e>
	{
		time100ms--;
 7da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7de:	81 50       	subi	r24, 0x01	; 1
 7e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		IS10MS = 0;//limpiamos la bandera de 10ms
 7e4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 7e8:	8d 7f       	andi	r24, 0xFD	; 253
 7ea:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
		IS100MS = 0;//limpiamos la bandera de 100ms
 7ee:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <flags>
 7f2:	8e 7f       	andi	r24, 0xFE	; 254
 7f4:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <flags>
 7f8:	08 95       	ret

000007fa <__vector_18>:


//INTERRUPTS
// Rutina de servicio de interrupci?n (ISR) para recepci?n USART
ISR(USART_RX_vect) // Vector 19 (0x0024)
{	
 7fa:	1f 92       	push	r1
 7fc:	0f 92       	push	r0
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	0f 92       	push	r0
 802:	11 24       	eor	r1, r1
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
 80c:	ef 93       	push	r30
 80e:	ff 93       	push	r31
	dataRx.buff[dataRx.indexW++] = UDR0;
 810:	e6 e2       	ldi	r30, 0x26	; 38
 812:	f2 e0       	ldi	r31, 0x02	; 2
 814:	a0 81       	ld	r26, Z
 816:	b1 81       	ldd	r27, Z+1	; 0x01
 818:	83 81       	ldd	r24, Z+3	; 0x03
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	98 0f       	add	r25, r24
 81e:	93 83       	std	Z+3, r25	; 0x03
 820:	a8 0f       	add	r26, r24
 822:	b1 1d       	adc	r27, r1
 824:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 828:	8c 93       	st	X, r24
	dataRx.indexW &= dataRx.mask;
 82a:	95 81       	ldd	r25, Z+5	; 0x05
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	89 23       	and	r24, r25
 830:	83 83       	std	Z+3, r24	; 0x03
}
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	0f 90       	pop	r0
 840:	0f be       	out	0x3f, r0	; 63
 842:	0f 90       	pop	r0
 844:	1f 90       	pop	r1
 846:	18 95       	reti

00000848 <__vector_14>:

// Rutina de servicio de interrupci?n (ISR) para Timer0 Compare Match A
ISR(TIMER0_COMPA_vect) // Vector 15 (0x001C)
{
 848:	1f 92       	push	r1
 84a:	0f 92       	push	r0
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	0f 92       	push	r0
 850:	11 24       	eor	r1, r1
 852:	8f 93       	push	r24
 854:	9f 93       	push	r25
 856:	af 93       	push	r26
 858:	bf 93       	push	r27
	MillisCounter++;
 85a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <MillisCounter>
 85e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <MillisCounter+0x1>
 862:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <MillisCounter+0x2>
 866:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <MillisCounter+0x3>
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	a1 1d       	adc	r26, r1
 86e:	b1 1d       	adc	r27, r1
 870:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <MillisCounter>
 874:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <MillisCounter+0x1>
 878:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <MillisCounter+0x2>
 87c:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <MillisCounter+0x3>
	time10ms--;
 880:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time10ms>
 884:	81 50       	subi	r24, 0x01	; 1
 886:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time10ms>
}
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	0f 90       	pop	r0
 894:	0f be       	out	0x3f, r0	; 63
 896:	0f 90       	pop	r0
 898:	1f 90       	pop	r1
 89a:	18 95       	reti

0000089c <__vector_12>:

//Interrupcion cada 10us
ISR(TIMER1_COMPB_vect)
{		
 89c:	1f 92       	push	r1
 89e:	0f 92       	push	r0
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	0f 92       	push	r0
 8a4:	11 24       	eor	r1, r1
 8a6:	8f 93       	push	r24
	hcSr04Modes=OFFTRIGGER; //Bandera para seguir adelante con la ejecuci?n del codigo
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
}
 8ae:	8f 91       	pop	r24
 8b0:	0f 90       	pop	r0
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	0f 90       	pop	r0
 8b6:	1f 90       	pop	r1
 8b8:	18 95       	reti

000008ba <__vector_10>:
/*
ICES = 0 -> falling (negative) edge 
ICES = 1 -> rising (positive) edge
*/
//Captura del flanco 
ISR(TIMER1_CAPT_vect){
 8ba:	1f 92       	push	r1
 8bc:	0f 92       	push	r0
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	0f 92       	push	r0
 8c2:	11 24       	eor	r1, r1
}
 8c4:	0f 90       	pop	r0
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	0f 90       	pop	r0
 8ca:	1f 90       	pop	r1
 8cc:	18 95       	reti

000008ce <__vector_3>:

ISR(PCINT0_vect)
{
 8ce:	1f 92       	push	r1
 8d0:	0f 92       	push	r0
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	0f 92       	push	r0
 8d6:	11 24       	eor	r1, r1
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
	if (PINB & (1<<PINB2)) // Flanco ascendente (inicio echo)
 8e0:	1a 9b       	sbis	0x03, 2	; 3
 8e2:	12 c0       	rjmp	.+36     	; 0x908 <__stack+0x9>
	{
		hcSr04Modes=UPFLANK;
 8e4:	82 e0       	ldi	r24, 0x02	; 2
 8e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
		startTime = TCNT1; //guardamos el tiempo en ese instante
 8ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 8ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 8f2:	a0 e0       	ldi	r26, 0x00	; 0
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <startTime>
 8fa:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <startTime+0x1>
 8fe:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <startTime+0x2>
 902:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <startTime+0x3>
 906:	14 c0       	rjmp	.+40     	; 0x930 <__stack+0x31>
	}
	else // Flanco descendente (final eco)
	{
		PORTB |= (1<<LEDBUILTIN); //ledOn
 908:	85 b1       	in	r24, 0x05	; 5
 90a:	80 62       	ori	r24, 0x20	; 32
 90c:	85 b9       	out	0x05, r24	; 5
		hcSr04Modes=DOWNFLANK;
 90e:	83 e0       	ldi	r24, 0x03	; 3
 910:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
		endTime = TCNT1;
 914:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 918:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 91c:	a0 e0       	ldi	r26, 0x00	; 0
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <endTime>
 924:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <endTime+0x1>
 928:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <endTime+0x2>
 92c:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <endTime+0x3>
	}
}
 930:	bf 91       	pop	r27
 932:	af 91       	pop	r26
 934:	9f 91       	pop	r25
 936:	8f 91       	pop	r24
 938:	0f 90       	pop	r0
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	0f 90       	pop	r0
 93e:	1f 90       	pop	r1
 940:	18 95       	reti

00000942 <main>:

/* END Function prototypes user code ------------------------------------------*/

int main()
{
	cli();
 942:	f8 94       	cli
    //INICIALIZAMOS VARIABLES
    dataRx.buff = (uint8_t *)buffRx;
 944:	e6 e2       	ldi	r30, 0x26	; 38
 946:	f2 e0       	ldi	r31, 0x02	; 2
 948:	86 e2       	ldi	r24, 0x26	; 38
 94a:	91 e0       	ldi	r25, 0x01	; 1
 94c:	91 83       	std	Z+1, r25	; 0x01
 94e:	80 83       	st	Z, r24
    dataRx.indexR = 0;
 950:	12 82       	std	Z+2, r1	; 0x02
    dataRx.indexW = 0;
 952:	13 82       	std	Z+3, r1	; 0x03
    dataRx.header = HEADER_U;
 954:	10 86       	std	Z+8, r1	; 0x08
    dataRx.mask = RXBUFSIZE - 1;
 956:	8f ef       	ldi	r24, 0xFF	; 255
 958:	85 83       	std	Z+5, r24	; 0x05
	dataRx.isComannd = 0;
 95a:	12 86       	std	Z+10, r1	; 0x0a
	
    dataTx.buff = buffTx;
 95c:	e1 e3       	ldi	r30, 0x31	; 49
 95e:	f2 e0       	ldi	r31, 0x02	; 2
 960:	25 e4       	ldi	r18, 0x45	; 69
 962:	32 e0       	ldi	r19, 0x02	; 2
 964:	31 83       	std	Z+1, r19	; 0x01
 966:	20 83       	st	Z, r18
    dataTx.indexR = 0;
 968:	12 82       	std	Z+2, r1	; 0x02
    dataTx.indexW = 0;
 96a:	13 82       	std	Z+3, r1	; 0x03
    dataTx.mask = TXBUFSIZE -1;
 96c:	84 83       	std	Z+4, r24	; 0x04
    RESETFLAGS = 0;
 96e:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <flags>
	
	MillisCounter = 0;
 972:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <MillisCounter>
 976:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <MillisCounter+0x1>
 97a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <MillisCounter+0x2>
 97e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <MillisCounter+0x3>
	
	//Inicializamos los pines salida/entrada
	DDRB |= (1<<LEDBUILTIN); //Seteo del led como salida	
 982:	84 b1       	in	r24, 0x04	; 4
 984:	80 62       	ori	r24, 0x20	; 32
 986:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<TRIG) | (0<<ECHO);//Definimos el trig como salida y el echo como entrada
 988:	84 b1       	in	r24, 0x04	; 4
 98a:	82 60       	ori	r24, 0x02	; 2
 98c:	84 b9       	out	0x04, r24	; 4
	
	//Seteamos el valor del led
	PORTB &= ~(1<<LEDBUILTIN); //ledOff
 98e:	85 b1       	in	r24, 0x05	; 5
 990:	8f 7d       	andi	r24, 0xDF	; 223
 992:	85 b9       	out	0x05, r24	; 5
	//PORTB |= (1<<LEDBUILTIN); //ledOn
	PORTB &= ~(1<<TRIG);//Inicializamos con el trigger apagado
 994:	85 b1       	in	r24, 0x05	; 5
 996:	8d 7f       	andi	r24, 0xFD	; 253
 998:	85 b9       	out	0x05, r24	; 5

	//Inicializamos interrupciones
	initTimer0();
 99a:	0e 94 a1 03 	call	0x742	; 0x742 <initTimer0>
	initTimer1();
 99e:	0e 94 ad 03 	call	0x75a	; 0x75a <initTimer1>
	initUSART0();
 9a2:	0e 94 92 03 	call	0x724	; 0x724 <initUSART0>
	initPCINT0();
 9a6:	0e 94 bc 03 	call	0x778	; 0x778 <initPCINT0>
	
	initHcSr04(); //Inicializamos el sensor
 9aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <initHcSr04>
	hcSr04Modes = IDLE;
 9ae:	84 e0       	ldi	r24, 0x04	; 4
 9b0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hcSr04Modes>
	
	//Configuracion de temporizadores
	delayConfig(&generalTime,GENERALTIME);
 9b4:	6a e0       	ldi	r22, 0x0A	; 10
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	87 e3       	ldi	r24, 0x37	; 55
 9ba:	92 e0       	ldi	r25, 0x02	; 2
 9bc:	0e 94 94 02 	call	0x528	; 0x528 <delayConfig>
	
	sei();
 9c0:	78 94       	sei
/* END Local variables -------------------------------------------------------*/


/* User code -----------------------------------------------------------------*/	
    while(1){
		do10ms();
 9c2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <do10ms>
		do100ms(); //función de librería
 9c6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <do100ms>
				
		hcSr04Task(hcsr04Control, (uint8_t*)&flags);
 9ca:	65 e4       	ldi	r22, 0x45	; 69
 9cc:	73 e0       	ldi	r23, 0x03	; 3
 9ce:	8f e1       	ldi	r24, 0x1F	; 31
 9d0:	93 e0       	ldi	r25, 0x03	; 3
 9d2:	0e 94 65 00 	call	0xca	; 0xca <hcSr04Task>
		getDistance(&distance, startTime, endTime);
 9d6:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <endTime>
 9da:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <endTime+0x1>
 9de:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <endTime+0x2>
 9e2:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <endTime+0x3>
 9e6:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <startTime>
 9ea:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <startTime+0x1>
 9ee:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <startTime+0x2>
 9f2:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <startTime+0x3>
 9f6:	85 e1       	ldi	r24, 0x15	; 21
 9f8:	91 e0       	ldi	r25, 0x01	; 1
 9fa:	0e 94 91 00 	call	0x122	; 0x122 <getDistance>
        //CONEXIONES SERIAL Y WIFI
        serialTask((_sRx *)&dataRx, &dataTx); //serialTask -> conexion serial
 9fe:	61 e3       	ldi	r22, 0x31	; 49
 a00:	72 e0       	ldi	r23, 0x02	; 2
 a02:	86 e2       	ldi	r24, 0x26	; 38
 a04:	92 e0       	ldi	r25, 0x02	; 2
 a06:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <serialTask>
 a0a:	db cf       	rjmp	.-74     	; 0x9c2 <main+0x80>

00000a0c <__tablejump2__>:
 a0c:	ee 0f       	add	r30, r30
 a0e:	ff 1f       	adc	r31, r31
 a10:	05 90       	lpm	r0, Z+
 a12:	f4 91       	lpm	r31, Z
 a14:	e0 2d       	mov	r30, r0
 a16:	09 94       	ijmp

00000a18 <_exit>:
 a18:	f8 94       	cli

00000a1a <__stop_program>:
 a1a:	ff cf       	rjmp	.-2      	; 0xa1a <__stop_program>
